{{- define "template" -}}
package ecs

// Code generated by go generate; DO NOT EDIT.

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

{{range makeRange 1 8}}
{{- $n := . -}}
{{- $upper := upperLetters . -}}
{{- $lower := lowerLetters . -}}

{{- $generics := join "[Comp" ", Comp" "]" $upper -}}
{{- $mapArgs := join "&Comp" "{}, &Comp" "{}" $upper -}}
{{- $comps := join "" ", " "" $lower -}}

func TestExchange{{.}}(t *testing.T) {
	w := NewWorld(16)

	posMap := NewMap2[Position, Velocity](&w)
	mapper := NewMap{{.}}{{$generics}}(&w)
	ex := NewExchange{{.}}{{$generics}}(&w).Removes(C[Velocity](), C[Position]())

	e := posMap.NewEntity(&Position{}, &Velocity{})

	ex.Exchange(e, {{$mapArgs}})
	assert.False(t, posMap.HasAll(e))
	assert.True(t, mapper.HasAll(e))
}

func TestExchange{{.}}Add(t *testing.T) {
	w := NewWorld(16)

	posMap := NewMap2[Position, Velocity](&w)
	mapper := NewMap{{.}}{{$generics}}(&w)
	ex := NewExchange{{.}}{{$generics}}(&w).Removes(C[Velocity](), C[Position]())

	e := posMap.NewEntity(&Position{}, &Velocity{})

	ex.Add(e, {{$mapArgs}})
	assert.True(t, posMap.HasAll(e))
	assert.True(t, mapper.HasAll(e))
}

func TestExchange{{.}}Remove(t *testing.T) {
	w := NewWorld(16)

	posMap := NewMap2[Position, Velocity](&w)
	mapper := NewMap{{.}}{{$generics}}(&w)
	ex := NewExchange{{.}}{{$generics}}(&w).Removes(C[Velocity](), C[Position]())

	e := posMap.NewEntity(&Position{}, &Velocity{})

	ex.Remove(e)
	assert.False(t, posMap.HasAll(e))
	assert.False(t, mapper.HasAll(e))
}
{{end -}}
{{end -}}

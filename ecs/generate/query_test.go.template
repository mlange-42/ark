{{- define "template" -}}
package ecs

// Code generated by go generate; DO NOT EDIT.

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

{{range makeRange 1 8}}
{{- $n := . -}}
{{- $upper := upperLetters . -}}
{{- $lower := lowerLetters . -}}

{{- $generics := join "[Comp" ", Comp" "]" $upper -}}
{{- $mapArgs := join "&Comp" "{}, &Comp" "{}" $upper -}}
{{- $comps := join "" ", " "" $lower -}}

{{- $genericsRel := replace $generics "CompA" "ChildOf" -}}
{{- $mapArgsRel := replace $mapArgs "CompA" "ChildOf" -}}

func TestQuery{{.}}(t *testing.T) {
	n := 10
	w := NewWorld(4)

	mapper := NewMap{{.}}{{$generics}}(&w)
	compMapper := NewMap[CompA](&w)
	posMapper := NewMap[Position](&w)

	for range n {
		_ = mapper.NewEntity({{$mapArgs}})

		e := mapper.NewEntity({{$mapArgs}})
		compMapper.Remove(e)

		e = mapper.NewEntity({{$mapArgs}})
		posMapper.Add(e, &Position{})
	}

	// normal filter
	filter := NewFilter{{.}}{{$generics}}(&w)
	query := filter.Query()
	assert.Equal(t, 2*n, query.Count())

	cnt := 0
	for query.Next() {
		_ = query.Entity()
		{{blanks .}} = query.Get()
		cnt++
	}
	assert.Equal(t, 2*n, cnt)

	// filter without
	filter = NewFilter{{.}}{{$generics}}(&w).Without(C[Position]())
	query = filter.Query()
	assert.Equal(t, n, query.Count())

	cnt = 0
	for query.Next() {
		_ = query.Entity()
		{{blanks .}} = query.Get()
		cnt++
	}
	assert.Equal(t, n, cnt)
	
	// filter exclusive
	filter = NewFilter{{.}}{{$generics}}(&w).Exclusive()
	query = filter.Query()
	assert.Equal(t, n, query.Count())

	cnt = 0
	for query.Next() {
		_ = query.Entity()
		{{blanks .}} = query.Get()
		cnt++
	}
	assert.Equal(t, n, cnt)
	
	// filter with
	filter = NewFilter{{.}}{{$generics}}(&w).With(C[Position]())
	query = filter.Query()
	assert.Equal(t, n, query.Count())

	cnt = 0
	for query.Next() {
		_ = query.Entity()
		{{blanks .}} = query.Get()
		cnt++
	}
	assert.Equal(t, n, cnt)

	_ = filter.Batch()
}

func TestQuery{{.}}Empty(t *testing.T) {
	w := NewWorld(4)

	posMap := NewMap[Position](&w)

	for range 10 {
		e1 := w.NewEntity()
		posMap.Add(e1, &Position{})
	}

	filter := NewFilter{{.}}{{$generics}}(&w)
	query := filter.Query()
	assert.Equal(t, 0, query.Count())
	
	assert.Panics(t, func() { query.Get() })
	assert.Panics(t, func() { query.Entity() })

	cnt := 0
	for query.Next() {
		cnt++
	}
	assert.Equal(t, 0, cnt)

	assert.Panics(t, func() { query.Get() })
	assert.Panics(t, func() { query.Entity() })
	assert.Panics(t, func() { query.Next() })
}

func TestQuery{{.}}Relations(t *testing.T) {
	n := 10
	w := NewWorld(4)

	parent1 := w.NewEntity()
	parent2 := w.NewEntity()
	parent3 := w.NewEntity()

	mapper := NewMap{{.}}{{$genericsRel}}(&w)

	for range n {
		_ = mapper.NewEntity({{$mapArgsRel}}, RelIdx(0, parent1))
		_ = mapper.NewEntity({{$mapArgsRel}}, RelIdx(0, parent2))
		e := mapper.NewEntity({{$mapArgsRel}}, RelIdx(0, parent3))
		w.RemoveEntity(e)
	}

	// normal filter
	filter := NewFilter{{.}}{{$genericsRel}}(&w)
	query := filter.Query()
	assert.Equal(t, 2*n, query.Count())

	cnt := 0
	for query.Next() {
		_ = query.Entity()
		{{blanks .}} = query.Get()
		cnt++
	}
	assert.Equal(t, 2*n, cnt)

	// relation filter 1
	filter = NewFilter{{.}}{{$genericsRel}}(&w).Relations(RelIdx(0, parent2))
	query = filter.Query()
	assert.Equal(t, n, query.Count())

	cnt = 0
	for query.Next() {
		_ = query.Entity()
		{{blanks .}} = query.Get()
		assert.Equal(t, parent2, query.GetRelation(0))
		cnt++
	}
	assert.Equal(t, n, cnt)

	// relation filter 2
	filter = NewFilter{{.}}{{$genericsRel}}(&w)
	query = filter.Query(RelIdx(0, parent2))
	assert.Equal(t, n, query.Count())

	cnt = 0
	for query.Next() {
		_ = query.Entity()
		{{blanks .}} = query.Get()
		assert.Equal(t, parent2, query.GetRelation(0))
		cnt++
	}
	assert.Equal(t, n, cnt)
}

func TestQuery{{.}}Registered(t *testing.T) {
	n := 10
	w := NewWorld(4)

	parent1 := w.NewEntity()
	parent2 := w.NewEntity()
	parent3 := w.NewEntity()

	mapper := NewMap{{.}}{{$genericsRel}}(&w)

	for range n {
		_ = mapper.NewEntity({{$mapArgsRel}}, RelIdx(0, parent1))
		_ = mapper.NewEntity({{$mapArgsRel}}, RelIdx(0, parent2))
		e := mapper.NewEntity({{$mapArgsRel}}, RelIdx(0, parent3))
		w.RemoveEntity(e)
	}

	// normal filter
	filter := NewFilter{{.}}{{$genericsRel}}(&w).Register()
	query := filter.Query()
	assert.Equal(t, 2*n, query.Count())

	cnt := 0
	for query.Next() {
		_ = query.Entity()
		{{blanks .}} = query.Get()
		cnt++
	}
	assert.Equal(t, 2*n, cnt)

	batch := filter.Batch()
	assert.Equal(t, filter.filter, *batch.filter)
	assert.Equal(t, filter.relations, batch.relations)

	filter.Unregister()

	// relation filter 1
	filter = NewFilter{{.}}{{$genericsRel}}(&w).Relations(RelIdx(0, parent2)).Register()
	query = filter.Query()
	assert.Equal(t, n, query.Count())

	cnt = 0
	for query.Next() {
		_ = query.Entity()
		{{blanks .}} = query.Get()
		assert.Equal(t, parent2, query.GetRelation(0))
		cnt++
	}
	assert.Equal(t, n, cnt)
	
	batch = filter.Batch()
	assert.Equal(t, filter.filter, *batch.filter)
	assert.Equal(t, 0, len(batch.relations))

	filter.Unregister()

	// relation filter 2
	filter = NewFilter{{.}}{{$genericsRel}}(&w).Register()
	query = filter.Query(RelIdx(0, parent2))
	assert.Equal(t, n, query.Count())

	cnt = 0
	for query.Next() {
		_ = query.Entity()
		{{blanks .}} = query.Get()
		assert.Equal(t, parent2, query.GetRelation(0))
		cnt++
	}
	assert.Equal(t, n, cnt)
	
	batch = filter.Batch(RelIdx(0, parent2))
	assert.Equal(t, filter.filter, *batch.filter)
	assert.Equal(t, 1, len(batch.relations))

	assert.Panics(t, func(){
		filter.Exclusive()
	})
	assert.Panics(t, func(){
		filter.Register()
	})
	
	filter.Unregister()
	assert.Panics(t, func(){
		filter.Unregister()
	})
}

{{end -}}

func TestQuery0(t *testing.T) {
	n := 10
	w := NewWorld(4)

	posMapper := NewMap[Position](&w)

	for range n {
		_ = w.NewEntity()
		e := w.NewEntity()
		posMapper.Add(e, &Position{})
	}

	// normal filter
	filter := NewFilter0(&w)
	query := filter.Query()
	assert.Equal(t, 2*n, query.Count())

	cnt := 0
	for query.Next() {
		_ = query.Entity()
		cnt++
	}
	assert.Equal(t, 2*n, cnt)

	// filter without
	filter = NewFilter0(&w).Without(C[Position]())
	query = filter.Query()
	assert.Equal(t, n, query.Count())

	cnt = 0
	for query.Next() {
		_ = query.Entity()
		cnt++
	}
	assert.Equal(t, n, cnt)

	// filter exclusive
	filter = NewFilter0(&w).Exclusive()
	query = filter.Query()
	assert.Equal(t, n, query.Count())

	cnt = 0
	for query.Next() {
		_ = query.Entity()
		cnt++
	}
	assert.Equal(t, n, cnt)
	
	// filter with
	filter = NewFilter0(&w).With(C[Position]())
	query = filter.Query()
	assert.Equal(t, n, query.Count())

	cnt = 0
	for query.Next() {
		_ = query.Entity()
		cnt++
	}
	assert.Equal(t, n, cnt)
}

func TestQuery0Empty(t *testing.T) {
	w := NewWorld(4)

	posMap := NewMap[Position](&w)

	for range 10 {
		e1 := w.NewEntity()
		posMap.Add(e1, &Position{})
	}

	filter := NewFilter0(&w).Without(C[Position]())
	query := filter.Query()
	assert.Equal(t, 0, query.Count())

	assert.Panics(t, func() { query.Entity() })

	cnt := 0
	for query.Next() {
		cnt++
	}
	assert.Equal(t, cnt, 0)

	assert.Panics(t, func() { query.Entity() })
	assert.Panics(t, func() { query.Next() })
}

func TestQuery0Relations(t *testing.T) {
	n := 10
	w := NewWorld(4)

	parent1 := w.NewEntity()
	parent2 := w.NewEntity()
	parent3 := w.NewEntity()

	childMapper := NewMap[ChildOf](&w)

	for range n {
		e := w.NewEntity()
		childMapper.Add(e, &ChildOf{}, parent1)

		e = w.NewEntity()
		childMapper.Add(e, &ChildOf{}, parent2)

		e = w.NewEntity()
		childMapper.Add(e, &ChildOf{}, parent3)
	}

	// normal filter
	filter := NewFilter0(&w)
	query := filter.Query()
	assert.Equal(t, 3*n+3, query.Count())

	cnt := 0
	for query.Next() {
		_ = query.Entity()
		cnt++
	}
	assert.Equal(t, cnt, 3*n+3)
	
	// registered filter
	filter = NewFilter0(&w).Register()
	query = filter.Query()
	assert.Equal(t, 3*n+3, query.Count())

	cnt = 0
	for query.Next() {
		_ = query.Entity()
		cnt++
	}
	assert.Equal(t, cnt, 3*n+3)

	assert.Panics(t, func(){
		filter.Exclusive()
	})
	assert.Panics(t, func(){
		filter.Register()
	})
	
	filter.Unregister()
	assert.Panics(t, func(){
		filter.Unregister()
	})
}

func TestQuery0Registered(t *testing.T) {
	n := 10
	w := NewWorld(4)

	for range n {
		w.NewEntity()
		w.NewEntity()
	}

	filter := NewFilter0(&w).Register()
	query := filter.Query()
	assert.Equal(t, 2*n, query.Count())

	cnt := 0
	for query.Next() {
		_ = query.Entity()
		cnt++
	}
	assert.Equal(t, 2*n, cnt)

	batch := filter.Batch()
	assert.Equal(t, filter.filter, *batch.filter)
	assert.Equal(t, filter.relations, batch.relations)

	assert.Panics(t, func(){
		filter.Exclusive()
	})
	assert.Panics(t, func(){
		filter.Register()
	})
	
	filter.Unregister()
	assert.Panics(t, func(){
		filter.Unregister()
	})
}
{{end -}}

{{- define "template" -}}
package ecs

// Code generated by go generate; DO NOT EDIT.

{{range makeRange 0 8}}
{{- $upper := upperLetters . -}}
{{- $generics := "" -}}
{{- $genericsShort := "" -}}
{{- if .}}
{{- $generics = join "[" " any, " " any]" $upper -}}
{{- $genericsShort = join "[" ", " "]" $upper -}}
{{- end}}

// Filter{{.}} is a filter for {{.}} components.
type Filter{{.}}{{$generics}} struct {
	world     *World
	ids       []ID
	mask      Mask
	without   Mask
	relations []RelationID
}

// NewFilter{{.}} creates a new [Filter{{.}}].
//
// Use [Filter{{.}}.Query] to obtain a [Query{{.}}].
func NewFilter{{.}}{{$generics}}(world *World) *Filter{{.}}{{$genericsShort}} {
	ids := []ID{
		{{- range $i, $v := $upper}}
		ComponentID[{{$v}}](world),
		{{- end}}
	}

	return &Filter{{.}}{{$genericsShort}}{
		world: world,
		ids:   ids,
		mask:  All(ids...),
	}
}

// With specifies additional components to filter for.
func (q *Filter{{.}}{{$genericsShort}}) With(comps ...Comp) *Filter{{.}}{{$genericsShort}} {
	for _,c := range comps {
		id := q.world.componentID(c.tp)
		q.mask.Set(id, true)
	}
	return q
}

// With specifies components to exclude.
func (q *Filter{{.}}{{$genericsShort}}) Without(comps ...Comp) *Filter{{.}}{{$genericsShort}} {
	for _,c := range comps {
		id := q.world.componentID(c.tp)
		q.without.Set(id, true)
	}
	return q
}

// Exclusive makes the filter exclusive in the sense that the component composition is matched exactly,
// and no other components are allowed.
func (q *Filter{{.}}{{$genericsShort}}) Exclusive() *Filter{{.}}{{$genericsShort}} {
	q.without = q.mask.Not()
	return q
}

// Query creates a [Query{{.}}] from this filter.
// This must be used each time before iterating a query.
func (q *Filter{{.}}{{$genericsShort}}) Query(rel ...RelationIndex) Query{{.}}{{$genericsShort}} {
	q.relations = relations(rel).toRelations(&q.world.storage.registry, q.ids, q.relations)
	return newQuery{{.}}{{$genericsShort}}(q.world, q.mask, q.without{{if .}}, q.ids{{end}}, q.relations)
}

// Batch creates a [Batch] from this filter.
func (q *Filter{{.}}{{$genericsShort}}) Batch(rel ...RelationIndex) Batch {
	q.relations = relations(rel).toRelations(&q.world.storage.registry, q.ids, q.relations)
	return Batch {
		mask:      q.mask,
		without:   q.without,
		relations: q.relations,
	}
}
{{end -}}
{{end -}}

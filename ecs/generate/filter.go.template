{{- define "template" -}}
package ecs

// Code generated by go generate; DO NOT EDIT.

{{range makeRange 0 8}}
{{- $n := . -}}
{{- $upper := upperLetters . -}}
{{- $generics := "" -}}
{{- $genericsShort := "" -}}
{{- $return := "" -}}
{{- $mask := "" -}}
{{- if .}}
{{- $generics = join "[" " any, " " any]" $upper -}}
{{- $genericsShort = join "[" ", " "]" $upper -}}
{{- $return = join "(*" ", *" ")" $upper -}}
{{- $mask = join "id" ", id" "" $upper -}}
{{- end}}

// Filter{{.}} is a filter for two components.
type Filter{{.}}{{$generics}} struct {
	world *World
	mask  Mask
	ids   []ID
}

// Query creates a [Query{{.}}] from this filter.
// This must be used each time before iterating a query.
func (q *Filter{{.}}{{$genericsShort}}) Query() Query{{.}}{{$genericsShort}} {
	components := make([]*componentStorage, {{.}})
	{{if .}}for i := range {{.}} {
		components[i] = &q.world.storage.components[q.ids[i].id]
	}{{end}}
	
	return Query{{.}}{{$genericsShort}}{
		world:      q.world,
		mask:       q.mask,
		components: components,
		cursor: cursor{
			table:    -1,
			index:    0,
			maxIndex: -1,
		},
	}
}
{{end -}}
{{end -}}

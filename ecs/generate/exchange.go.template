{{- define "template" -}}
package ecs

// Code generated by go generate; DO NOT EDIT.

import "unsafe"

{{range makeRange 1 8}}
{{- $n := . -}}
{{- $lower := lowerLetters . -}}
{{- $upper := upperLetters . -}}
{{- $generics := join "[" " any, " " any]" $upper -}}
{{- $genericsShort := join "[" ", " "]" $upper -}}
{{- $return := join "(*" ", *" ")" $upper -}}
{{- $args := arguments $lower $upper "" -}}
{{- $mask := join "id" ", id" "" $upper -}}

// Exchange{{.}} allows to exchange components of entities.
// It adds the given components. Use [Exchange{{.}}.Removes]
// to set components to be removed.
type Exchange{{.}}{{$generics}} struct {
	world     *World
	ids       []ID
	remove    []ID
	relations []RelationID
}

// NewExchange{{.}} creates an [Exchange{{.}}].
func NewExchange{{.}}{{$generics}}(world *World) *Exchange{{.}}{{$genericsShort}} {
	ids := []ID{
		{{- range $upper}}
		ComponentID[{{.}}](world),
		{{- end}}
	}
	return &Exchange{{.}}{{$genericsShort}}{
		world: world,
		ids:   ids,
	}
}

// Removes sets the components that this [Exchange{{.}}] removes.
// Can be called multiple times in chains, or once with multiple arguments.
func (ex *Exchange{{.}}{{$genericsShort}}) Removes(components ...Comp) *Exchange{{.}}{{$genericsShort}} {
	for _, c := range components {
		ex.remove = append(ex.remove, ex.world.componentID(c.tp))
	}
	return ex
}

// Add the mapped components to the given entity.
func (ex *Exchange{{.}}{{$genericsShort}}) Add(entity Entity, {{$args}}, rel ...Relation) {
	ex.relations = relations(rel).toRelations(ex.world, ex.ids, nil, ex.relations)
	ex.world.exchange(entity, ex.ids, nil, []unsafe.Pointer{
		{{- range $lower}}
		unsafe.Pointer({{.}}),
		{{- end}}
	}, ex.relations)
}

// Remove the components previously specified with [Exchange{{.}}.Removes] from the given entity.
func (ex *Exchange{{.}}{{$genericsShort}}) Remove(entity Entity) {
	ex.world.exchange(entity, nil, ex.remove, nil, nil)
}

// Exchange performs the exchange on the given entity, adding the provided components
// and removing those previously specified with [Exchange{{.}}.Removes].
func (ex *Exchange{{.}}{{$genericsShort}}) Exchange(entity Entity, {{$args}}, rel ...Relation) {
	ex.relations = relations(rel).toRelations(ex.world, ex.ids, nil, ex.relations)
	ex.world.exchange(entity, ex.ids, ex.remove, []unsafe.Pointer{
		{{- range $lower}}
		unsafe.Pointer({{.}}),
		{{- end}}
	}, ex.relations)
}

// AddBatch adds the mapped components to all entities matching the given batch filter.
func (ex *Exchange{{.}}{{$genericsShort}}) AddBatch(batch *Batch, {{$args}}, rel ...Relation) {
	ex.relations = relations(rel).toRelations(ex.world, ex.ids, nil, ex.relations)
	ex.world.exchangeBatch(batch, ex.ids, nil, []unsafe.Pointer{
		{{- range $lower}}
		unsafe.Pointer({{.}}),
		{{- end}}
	}, ex.relations, nil)
}

// AddBatchFn adds the mapped components to all entities matching the given batch filter,
// running the given function on each. The function can be nil.
func (ex *Exchange{{.}}{{$genericsShort}}) AddBatchFn(batch *Batch, fn func(entity Entity, {{$args}}), rel ...Relation) {
	ex.exchangeBatchFn(batch, fn, false, rel...)
}

// RemoveBatch removes the components previously specified with [Exchange{{.}}.Removes]
// from all entities matching the given batch filter,
// running the given function on each. The function can be nil.
func (ex *Exchange{{.}}{{$genericsShort}}) RemoveBatch(batch *Batch, fn func(entity Entity)) {
	var process func(tableID tableID, start, len int)
	if fn != nil {
		process = func(tableID tableID, start, len int) {
			table := &ex.world.storage.tables[tableID]

			lock := ex.world.lock()
			for i := range len {
				index := uintptr(start + i)
				fn(table.GetEntity(index))
			}
			ex.world.unlock(lock)
		}
	}
	ex.world.exchangeBatch(batch, nil, ex.remove, nil, nil, process)
}

// ExchangeBatch performs the exchange on all entities matching the given batch filter.
func (ex *Exchange{{.}}{{$genericsShort}}) ExchangeBatch(batch *Batch, {{$args}}, rel ...Relation) {
	ex.relations = relations(rel).toRelations(ex.world, ex.ids, nil, ex.relations)
	ex.world.exchangeBatch(batch, ex.ids, ex.remove, []unsafe.Pointer{
		{{- range $lower}}
		unsafe.Pointer({{.}}),
		{{- end}}
	}, ex.relations, nil)
}

// ExchangeBatchFn performs the exchange on all entities matching the given batch filter,
// running the given function on each. The function can be nil.
func (ex *Exchange{{.}}{{$genericsShort}}) ExchangeBatchFn(batch *Batch, fn func(entity Entity, {{$args}}), rel ...Relation) {
	ex.exchangeBatchFn(batch, fn, true, rel...)
}


func (ex *Exchange{{.}}{{$genericsShort}}) exchangeBatchFn(batch *Batch, fn func(entity Entity, {{$args}}), remove bool, rel ...Relation) {
	ex.relations = relations(rel).toRelations(ex.world, ex.ids, nil, ex.relations)

	var process func(tableID tableID, start, len int)
	if fn != nil {
		process = func(tableID tableID, start, len int) {
			table := &ex.world.storage.tables[tableID]
			{{- range $i, $v := $upper}}
			column{{$v}} := table.GetColumn(ex.ids[{{$i}}])
			{{- end}}

			lock := ex.world.lock()
			for i := range len {
				index := uintptr(start + i)
				fn(
					table.GetEntity(index),
					{{- range $upper}}
					(*{{.}})(column{{.}}.Get(index)),
					{{- end}}
				)
			}
			ex.world.unlock(lock)
		}
	}
	if remove {
		ex.world.exchangeBatch(batch, ex.ids, ex.remove, nil, ex.relations, process)
	} else {
		ex.world.exchangeBatch(batch, ex.ids, nil, nil, ex.relations, process)
	}
}

{{end -}}
{{end -}}

{{- define "template" -}}
package ecs

// Code generated by go generate; DO NOT EDIT.

import "unsafe"

{{range makeRange 1 8}}
{{- $n := . -}}
{{- $lower := lowerLetters . -}}
{{- $upper := upperLetters . -}}
{{- $generics := join "[" " any, " " any]" $upper -}}
{{- $genericsShort := join "[" ", " "]" $upper -}}
{{- $return := join "(*" ", *" ")" $upper -}}
{{- $args := arguments $lower $upper -}}
{{- $mask := join "id" ", id" "" $upper -}}

// Exchange{{.}} allows to exchange components of entities.
// It adds the given components. Use [Exchange{{.}}.Removes]
// to set components to be removed.
type Exchange{{.}}{{$generics}} struct {
	world  *World
	ids    []ID
	remove []ID
}

// NewExchange{{.}} creates an [Exchange{{.}}].
func NewExchange{{.}}{{$generics}}(world *World) *Exchange{{.}}{{$genericsShort}} {
	ids := []ID{
		{{- range $upper}}
		ComponentID[{{.}}](world),
		{{- end}}
	}
	return &Exchange{{.}}{{$genericsShort}}{
		world: world,
		ids:   ids,
	}
}

// Removes sets the components that this [Exchange{{.}}] removes.
func (ex *Exchange{{.}}{{$genericsShort}}) Removes(components ...Comp) *Exchange{{.}}{{$genericsShort}} {
	ids := make([]ID, len(components))
	for i, c := range components {
		ids[i] = ex.world.componentID(c.tp)
	}
	ex.remove = ids
	return ex
}

// Exchange performs the exchange on the given entity, adding the provided components
// and removing those previously specified with [Exchange{{.}}.Removes].
func (ex *Exchange{{.}}{{$genericsShort}}) Exchange(entity Entity, {{$args}}) {
	ex.world.exchange(entity, ex.ids, ex.remove, []unsafe.Pointer{
		{{- range $lower}}
		unsafe.Pointer({{.}}),
		{{- end}}
	})
}
{{end -}}
{{end -}}

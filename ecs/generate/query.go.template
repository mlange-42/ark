{{- define "template" -}}
package ecs

// Code generated by go generate; DO NOT EDIT.

type cursor struct {
	table    int
	index    uintptr
	maxIndex int64
}

{{range makeRange 0 8}}
{{- $n := . -}}
{{- $upper := upperLetters . -}}
{{- $generics := "" -}}
{{- $genericsShort := "" -}}
{{- $return := "" -}}
{{- $mask := "" -}}
{{- if .}}
{{- $generics = join "[" " any, " " any]" $upper -}}
{{- $genericsShort = join "[" ", " "]" $upper -}}
{{- $return = join "(*" ", *" ")" $upper -}}
{{- $mask = join "id" ", id" "" $upper -}}
{{- end}}

// Query{{.}} is a query for {{.}} components.
// Use a [NewFilter{{.}}] to create one.
type Query{{.}}{{$generics}} struct {
	world      *World
	mask       Mask
	lock       uint8
	cursor     cursor
	table      *table
	components []*componentStorage
	{{- range $upper}}
	column{{.}}    *column
	{{- end}}
}

func newQuery{{.}}{{$generics}}(world *World, mask Mask{{if .}}, ids []ID{{end}}) Query{{.}}{{$genericsShort}} {
	components := make([]*componentStorage, {{.}})
	{{if .}}for i := range {{.}} {
		components[i] = &world.storage.components[ids[i].id]
	}{{end}}
	
	return Query{{.}}{{$genericsShort}}{
		world:      world,
		mask:       mask,
		lock:       world.lock(),
		components: components,
		cursor: cursor{
			table:    -1,
			index:    0,
			maxIndex: -1,
		},
	}
}

// Next advances the query's cursor to the next entity.
func (q *Query{{.}}{{$genericsShort}}) Next() bool {
	if int64(q.cursor.index) < q.cursor.maxIndex {
		q.cursor.index++
		return true
	}
	return q.nextTable()
}

// Entity returns the current entity.
func (q *Query{{.}}{{$genericsShort}}) Entity() Entity {
	return q.table.GetEntity(q.cursor.index)
}

// Get returns the queried components of the current entity.
func (q *Query{{.}}{{$genericsShort}}) Get() {{$return}} {
	return {{range $i, $v := $upper}}{{if $i}},
		{{end}}(*{{$v}})(q.column{{$v}}.Get(q.cursor.index)){{end}}
}

// Close closes the Query and unlocks the world.
//
// Automatically called when iteration finishes.
// Needs to be called only if breaking out of the query iteration or not iterating at all.
func (q *Query{{.}}{{$genericsShort}}) Close() {
	q.table = nil
	{{- range $i, $v := $upper}}
	q.column{{$v}} = nil
	{{- end}}
	q.world.unlock(q.lock)
}

func (q *Query{{.}}{{$genericsShort}}) nextTable() bool {
	maxTableIndex := len(q.world.storage.tables) - 1
	for q.cursor.table < maxTableIndex {
		q.cursor.table++
		q.table = &q.world.storage.tables[q.cursor.table]
		archetype := &q.world.storage.archetypes[q.table.archetype]
		if !archetype.mask.Contains(&q.mask) || q.table.entities.Len() == 0 {
			continue
		}
		{{- range $i, $v := $upper}}
		q.column{{$v}} = q.components[{{$i}}].columns[q.cursor.table]
		{{- end}}

		q.cursor.index = 0
		q.cursor.maxIndex = int64(q.table.entities.Len() - 1)
		return true
	}
	if q.table == nil {
		panic("query is already closed. Create a new one to iterate again")
	}
	q.table = nil
	{{- range $i, $v := $upper}}
	q.column{{$v}} = nil
	{{- end}}

	q.world.unlock(q.lock)
	return false
}
{{end -}}
{{end -}}

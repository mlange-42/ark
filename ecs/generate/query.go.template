{{- define "template" -}}
package ecs

// Code generated by go generate; DO NOT EDIT.

type cursor struct {
	table    int
	index    uintptr
	maxIndex int64
}

{{range makeRange 0 8}}
{{- $n := . -}}
{{- $upper := upperLetters . -}}
{{- $generics := "" -}}
{{- $genericsShort := "" -}}
{{- $return := "" -}}
{{- $mask := "" -}}
{{- if .}}
{{- $generics = join "[" " any, " " any]" $upper -}}
{{- $genericsShort = join "[" ", " "]" $upper -}}
{{- $return = join "(*" ", *" ")" $upper -}}
{{- $mask = join "id" ", id" "" $upper -}}
{{- end}}

// Query{{.}} is a filter for two components.
type Query{{.}}{{$generics}} struct {
	world      *World
	mask       Mask
	cursor     cursor
	table      *table
	components []*componentStorage
	{{- range $upper}}
	column{{.}}    *column
	{{- end}}
}

// Next advances the query's cursor to the next entity.
func (q *Query{{.}}{{$genericsShort}}) Next() bool {
	if int64(q.cursor.index) < q.cursor.maxIndex {
		q.cursor.index++
		return true
	}
	return q.nextTable()
}

// Entity returns the current entity.
func (q *Query{{.}}{{$genericsShort}}) Entity() Entity {
	return q.table.GetEntity(q.cursor.index)
}

// Get returns the queries components of the current entity.
func (q *Query{{.}}{{$genericsShort}}) Get() {{$return}} {
	return {{range $i, $v := $upper}}{{if $i}},
		{{end}}(*{{$v}})(q.column{{$v}}.Get(q.cursor.index)){{end}}
}

func (q *Query{{.}}{{$genericsShort}}) nextTable() bool {
	maxTableIndex := len(q.world.storage.tables) - 1
	for q.cursor.table < maxTableIndex {
		q.cursor.table++
		q.table = &q.world.storage.tables[q.cursor.table]
		archetype := &q.world.storage.archetypes[q.table.archetype]
		if !archetype.mask.Contains(&q.mask) || q.table.entities.Len() == 0 {
			continue
		}
		{{- range $i, $v := $upper}}
		q.column{{$v}} = q.components[{{$i}}].columns[q.cursor.table]
		{{- end}}

		q.cursor.index = 0
		q.cursor.maxIndex = int64(q.table.entities.Len() - 1)
		return true
	}
	if q.table == nil {
		panic("query is already closed. Create a new one to iterate again")
	}
	q.table = nil
	{{- range $i, $v := $upper}}
	q.column{{$v}} = nil
	{{- end}}
	return false
}
{{end -}}
{{end -}}

{{- define "template" -}}
package ecs

// Code generated by go generate; DO NOT EDIT.

type cursor struct {
	archetype int32
	table     int32
	index     uintptr
	maxIndex  int64
}

{{range makeRange 0 8}}
{{- $n := . -}}
{{- $upper := upperLetters . -}}
{{- $generics := "" -}}
{{- $genericsShort := "" -}}
{{- $return := "" -}}
{{- $mask := "" -}}
{{- if .}}
{{- $generics = join "[" " any, " " any]" $upper -}}
{{- $genericsShort = join "[" ", " "]" $upper -}}
{{- $return = join "(*" ", *" ")" $upper -}}
{{- $mask = join "id" ", id" "" $upper -}}
{{- end}}

// Query{{.}} is a query for {{.}} components.
// Use a [Filter{{.}}] to create one.
//
// Queries are one-time use iterators and must be re-created each time before iterating.
{{- if ne . 2 }}
//
// See [Query2] for a usage example.
{{- end}}
type Query{{.}}{{$generics}} struct {
	world      *World
	filter     *filter
	table      *table
	cache      *cacheEntry
	{{- range $upper}}
	column{{.}}    *column
	{{- end}}
	relations  []RelationID
	tables     []tableID
	components []*componentStorage
	cursor     cursor
	lock       uint8
}

{{if . -}}
// GetRelation returns the entity relation target of the component at the given index.
func (q *Query{{.}}{{$genericsShort}}) GetRelation(index int) Entity {
	return q.components[index].columns[q.table.id].target
}
{{- end}}

// Count counts the entities matching this query.
//
// Has some overhead of iterating through archetypes.
// However, this is still much faster than manual counting via iteration.
//
// Does not iterate or close the query.
func (q *Query{{.}}{{$genericsShort}}) Count() int {
	if q.cache == nil {
		return countQuery(&q.world.storage, q.filter, q.relations)
	}
	return countQueryCache(&q.world.storage, q.cache, q.relations)
}

// Close closes the Query and unlocks the world.
//
// Automatically called when iteration completes.
// Needs to be called only if breaking out of the query iteration or not iterating at all.
func (q *Query{{.}}{{$genericsShort}}) Close() {
	q.cursor.archetype = -2
	q.cursor.table = -2
	q.tables = nil
	q.table = nil
	q.cache = nil
	{{- range $i, $v := $upper}}
	q.column{{$v}} = nil
	{{- end}}
	q.world.unlock(q.lock)
}

func (q *Query{{.}}{{$genericsShort}}) nextTableOrArchetype() bool {
	if q.cache != nil {
		return q.nextTable(q.cache.tables)
	}
	if q.cursor.archetype >= 0 && q.nextTable(q.tables) {
		return true
	}
	return q.nextArchetype()
}

func (q *Query{{.}}{{$genericsShort}}) nextArchetype() bool {
	maxArchIndex := int32(len(q.world.storage.archetypes) - 1)
	for q.cursor.archetype < maxArchIndex {
		q.cursor.archetype++
		archetype := &q.world.storage.archetypes[q.cursor.archetype]
		if !q.filter.matches(&archetype.mask) {
			continue
		}

		if !archetype.HasRelations() {
			table := &q.world.storage.tables[archetype.tables[0]]
			if table.Len() > 0 {
				q.setTable(0, table)
				return true
			}
			continue
		}

		q.tables = archetype.GetTables(q.relations)
		q.cursor.table = -1
		if q.nextTable(q.tables) {
			return true
		}
	}
	q.Close()
	return false
}

func (q *Query{{.}}{{$genericsShort}}) nextTable(tables []tableID) bool {
	maxTableIndex := int32(len(tables) - 1)
	for q.cursor.table < maxTableIndex {
		q.cursor.table++
		table := &q.world.storage.tables[tables[q.cursor.table]]
		if table.Len() == 0 {
			continue
		}
		if !table.Matches(q.relations) {
			continue
		}
		q.setTable(q.cursor.table, table)
		return true
	}
	if q.cache != nil {
		q.Close()
	}
	return false
}

func (q *Query{{.}}{{$genericsShort}}) setTable(index int32, table *table) {
	q.cursor.table = index
	q.table = table
	{{- range $i, $v := $upper}}
	q.column{{$v}} = q.components[{{$i}}].columns[q.table.id]
	{{- end}}
	q.cursor.index = 0
	q.cursor.maxIndex = int64(q.table.Len() - 1)
}

{{end -}}
{{end -}}

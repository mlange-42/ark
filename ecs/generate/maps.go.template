{{- define "template" -}}
package ecs

// Code generated by go generate; DO NOT EDIT.

import "unsafe"

{{range makeRange 1 8}}
{{- $n := . -}}
{{- $lower := lowerLetters . -}}
{{- $upper := upperLetters . -}}
{{- $generics := join "[" " any, " " any]" $upper -}}
{{- $genericsShort := join "[" ", " "]" $upper -}}
{{- $return := join "(*" ", *" ")" $upper -}}
{{- $args := arguments $lower $upper "" -}}
{{- $mask := join "id" ", id" "" $upper -}}

// Map{{.}} is a mapper to access {{.}} components of an entity.
type Map{{.}}{{$generics}} struct {
	world    *World
	ids      []ID
	{{- range $upper}}
	storage{{.}} *componentStorage
	{{- end}}
	relations []RelationID
}

// NewMap{{.}} creates a new [Map{{.}}].
func NewMap{{.}}{{$generics}}(world *World) Map{{.}}{{$genericsShort}} {
	ids := []ID{
		{{- range $upper}}
		ComponentID[{{.}}](world),
		{{- end}}
	}
	return Map{{.}}{{$genericsShort}}{
		world:    world,
		ids:      ids,
		{{- range $i, $v := $upper}}
		storage{{$v}}: &world.storage.components[ids[{{$i}}].id],
		{{- end}}
	}
}

// NewEntity creates a new entity with the mapped components.
func (m *Map{{.}}{{$genericsShort}}) NewEntity({{$args}}, rel ...Relation) Entity {
	m.relations = relations(rel).toRelations(m.world, m.ids, nil, m.relations)
	return m.world.newEntityWith(m.ids, []unsafe.Pointer{
		{{- range $lower}}
		unsafe.Pointer({{.}}),
		{{- end}}
	}, m.relations)
}

// NewEntityFn creates a new entity with the mapped component and runs a callback instead of using a component for initialization.
// The callback can be nil.
func (m *Map{{.}}{{$genericsShort}}) NewEntityFn(fn func({{$args}}), rel ...Relation) Entity {
	m.relations = relations(rel).toRelations(m.world, m.ids, nil, m.relations)
	entity := m.world.newEntityWith(m.ids, nil, m.relations)
	if fn != nil {
		index := &m.world.storage.entities[entity.id]
		row := uintptr(index.row)
		fn(
			{{- range $upper}}
			(*{{.}})(m.storage{{.}}.columns[index.table].Get(row)),
			{{- end}}
		)
	}
	return entity
}

// NewBatch creates a batch of new entities with the mapped components.
func (m *Map{{.}}{{$genericsShort}}) NewBatch(count int, {{$args}}, rel ...Relation) {
	m.relations = relations(rel).toRelations(m.world, m.ids, nil, m.relations)
	m.world.newEntitiesWith(count, m.ids, []unsafe.Pointer{
		{{- range $lower}}
		unsafe.Pointer({{.}}),
		{{- end}}
	}, m.relations)
}

// NewBatchFn creates a batch of new entities with the mapped components, running the given initializer function on each.
// The initializer function can be nil.
func (m *Map{{.}}{{$genericsShort}}) NewBatchFn(count int, fn func(entity Entity, {{$args}}), rel ...Relation) {
	m.relations = relations(rel).toRelations(m.world, m.ids, nil, m.relations)
	tableID, start := m.world.newEntities(count, m.ids, m.relations)
	if fn == nil {
		return
	}

	table := &m.world.storage.tables[tableID]
	{{- range $upper}}
	column{{.}} := m.storage{{.}}.columns[tableID]
	{{- end}}

	lock := m.world.lock()
	for i := range count {
		index := uintptr(start + i)
		fn(
			table.GetEntity(index),
			{{- range $upper}}
			(*{{.}})(column{{.}}.Get(index)),
			{{- end}}
		)
	}
	m.world.unlock(lock)
}

// Get returns the mapped components for the given entity.
func (m *Map{{.}}{{$genericsShort}}) Get(entity Entity) {{$return}} {
	if !m.world.Alive(entity) {
		panic("can't get components of a dead entity")
	}
	return m.GetUnchecked(entity)
}

// GetUnchecked returns the mapped components for the given entity.
// In contrast to [Map{{.}}.Get], it does not check whether the entity is alive.
// Can be used as an optimization when it is certain that the entity is alive.
func (m *Map{{.}}{{$genericsShort}}) GetUnchecked(entity Entity) {{$return}} {
	{{- range $n}}
	m.world.storage.checkHasComponent(entity, m.ids[{{.}}])
	{{- end}}

	index := &m.world.storage.entities[entity.id]
	row := uintptr(index.row)

	return {{range $i, $v := $upper}}{{if $i}},
		{{end}}(*{{$v}})(m.storage{{$v}}.columns[index.table].Get(row)){{end}}
}

// HasAll return whether the given entity has all mapped components.
func (m *Map{{.}}{{$genericsShort}}) HasAll(entity Entity) bool {
	if !m.world.Alive(entity) {
		panic("can't check components of a dead entity")
	}
	index := m.world.storage.entities[entity.id]
	return {{range $i, $v := $upper}}{{if $i}} &&
		{{end}}m.storage{{$v}}.columns[index.table] != nil{{end}}
}

// Add the mapped components to the given entity.
func (m *Map{{.}}{{$genericsShort}}) Add(entity Entity, {{$args}}, rel ...Relation) {
	m.relations = relations(rel).toRelations(m.world, m.ids, nil, m.relations)
	m.world.exchange(entity, m.ids, nil, []unsafe.Pointer{
		{{- range $lower}}
		unsafe.Pointer({{.}}),
		{{- end}}
	}, m.relations)
}

// AddFn adds the mapped components to the given entity and runs a callback instead of using components for initialization.
// The callback can be nil.
func (m *Map{{.}}{{$genericsShort}}) AddFn(entity Entity, fn func({{$args}}), rel ...Relation) {
	m.relations = relations(rel).toRelations(m.world, m.ids, nil, m.relations)
	m.world.exchange(entity, m.ids, nil, nil, m.relations)
	if fn != nil {
		index := &m.world.storage.entities[entity.id]
		row := uintptr(index.row)
		fn(
			{{- range $upper}}
			(*{{.}})(m.storage{{.}}.columns[index.table].Get(row)),
			{{- end}}
		)
	}
}

// AddBatch adds the mapped components to all entities matching the given batch filter.
func (m *Map{{.}}{{$genericsShort}}) AddBatch(batch *Batch, {{$args}}, rel ...Relation) {
	m.relations = relations(rel).toRelations(m.world, m.ids, nil, m.relations)
	m.world.exchangeBatch(batch, m.ids, nil, []unsafe.Pointer{
		{{- range $lower}}
		unsafe.Pointer({{.}}),
		{{- end}}
	}, m.relations, nil)
}

// AddBatchFn adds the mapped components to all entities matching the given batch filter,
// running the given function on each. The function can be nil.
func (m *Map{{.}}{{$genericsShort}}) AddBatchFn(batch *Batch, fn func(entity Entity, {{$args}}), rel ...Relation) {
	m.relations = relations(rel).toRelations(m.world, m.ids, nil, m.relations)

	var process func(tableID tableID, start, len int)
	if fn != nil {
		process = func(tableID tableID, start, len int) {
			table := &m.world.storage.tables[tableID]
			{{- range $upper}}
			column{{.}} := m.storage{{.}}.columns[tableID]
			{{- end}}

			lock := m.world.lock()
			for i := range len {
				index := uintptr(start + i)
				fn(
					table.GetEntity(index),
					{{- range $upper}}
					(*{{.}})(column{{.}}.Get(index)),
					{{- end}}
				)
			}
			m.world.unlock(lock)
		}
	}
	m.world.exchangeBatch(batch, m.ids, nil, nil, m.relations, process)
}

// Remove the mapped components from the given entity.
func (m *Map{{.}}{{$genericsShort}}) Remove(entity Entity) {
	m.world.exchange(entity, nil, m.ids, nil, nil)
}

// RemoveBatch removes the mapped components from all entities matching the given batch filter,
// running the given function on each. The function can be nil.
func (m *Map{{.}}{{$genericsShort}}) RemoveBatch(batch *Batch, fn func(entity Entity)) {
	var process func(tableID tableID, start, len int)
	if fn != nil {
		process = func(tableID tableID, start, len int) {
			table := &m.world.storage.tables[tableID]

			lock := m.world.lock()
			for i := range len {
				index := uintptr(start + i)
				fn(table.GetEntity(index))
			}
			m.world.unlock(lock)
		}
	}
	m.world.exchangeBatch(batch, nil, m.ids, nil, nil, process)
}

// GetRelation returns the relation target of an entity for the component at the given index.
func (m *Map{{.}}{{$genericsShort}}) GetRelation(entity Entity, index int) Entity {
	if !m.world.Alive(entity) {
		panic("can't get entity relation target for a dead entity")
	}
	return m.GetRelationUnchecked(entity, index)
}

// GetRelationUnchecked returns the relation target of an entity for the component at the given index.
// In contrast to [Map{{.}}.GetRelation], it does not check whether the entity is alive.
// Can be used as an optimization when it is certain that the entity is alive.
func (m *Map{{.}}{{$genericsShort}}) GetRelationUnchecked(entity Entity, index int) Entity {
	return m.world.storage.getRelation(entity, m.ids[index])
}

// SetRelations sets relation targets for the given entity.
func (m *Map{{.}}{{$genericsShort}}) SetRelations(entity Entity, rel ...Relation) {
	// alive check is done in World.setRelations
	m.relations = relations(rel).toRelations(m.world, m.ids, nil, m.relations)
	m.world.setRelations(entity, m.relations)
}

// SetRelationsBatch sets relation targets for all entities matching the given batch filter.
func (m *Map{{.}}{{$genericsShort}}) SetRelationsBatch(batch *Batch, fn func(entity Entity), rel ...Relation) {
	m.relations = relations(rel).toRelations(m.world, m.ids, nil, m.relations)

	var process func(tableID tableID, start, len int)
	if fn != nil {
		process = func(tableID tableID, start, len int) {
			table := &m.world.storage.tables[tableID]

			lock := m.world.lock()
			for i := range len {
				index := uintptr(start + i)
				fn(table.GetEntity(index))
			}
			m.world.unlock(lock)
		}
	}
	m.world.setRelationsBatch(batch, m.relations, process)
}

{{end -}}
{{end -}}

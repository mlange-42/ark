{{- define "template" -}}
package ecs

// Code generated by go generate; DO NOT EDIT.

import "unsafe"

{{range makeRange 1 8}}
{{- $n := . -}}
{{- $lower := lowerLetters . -}}
{{- $upper := upperLetters . -}}
{{- $generics := join "[" " any, " " any]" $upper -}}
{{- $genericsShort := join "[" ", " "]" $upper -}}
{{- $return := join "(*" ", *" ")" $upper -}}
{{- $args := arguments $lower $upper -}}
{{- $mask := join "id" ", id" "" $upper -}}

// Map{{.}} is a mapper to access {{.}} components of an entity.
type Map{{.}}{{$generics}} struct {
	world    *World
	ids      []ID
	{{- range $upper}}
	storage{{.}} *componentStorage
	{{- end}}
}

// NewMap{{.}} creates a new [Map{{.}}].
func NewMap{{.}}{{$generics}}(w *World) Map{{.}}{{$genericsShort}} {
	ids := []ID{
		{{- range $upper}}
		ComponentID[{{.}}](w),
		{{- end}}
	}
	return Map{{.}}{{$genericsShort}}{
		world:    w,
		ids:      ids,
		{{- range $i, $v := $upper}}
		storage{{$v}}: &w.storage.components[ids[{{$i}}].id],
		{{- end}}
	}
}

// Get returns the mapped components for the given entity.
func (m *Map{{.}}{{$genericsShort}}) Get(entity Entity) {{$return}} {
	if !m.world.Alive(entity) {
		panic("can't get components of a dead entity")
	}
	return m.GetUnchecked(entity)
}

// GetUnchecked returns the mapped components for the given entity.
// It does not check whether the entity is alive.
// Can be used as an optimization when it is certain that the entity is alive.
func (m *Map{{.}}{{$genericsShort}}) GetUnchecked(entity Entity) {{$return}} {
	index := m.world.entities[entity.id]
	row := uintptr(index.row)
	return {{range $i, $v := $upper}}{{if $i}},
		{{end}}(*{{$v}})(m.storage{{$v}}.columns[index.table].Get(row)){{end}}
}

// Add the mapped components to the given entity.
func (m *Map{{.}}{{$genericsShort}}) Add(entity Entity, {{$args}}) {
	if !m.world.Alive(entity) {
		panic("can't add components to a dead entity")
	}
	m.world.exchange(entity, m.ids, nil, []unsafe.Pointer{
		{{- range $lower}}
		unsafe.Pointer({{.}}),
		{{- end}}
	})
}

// Remove the mapped components from the given entity.
func (m *Map{{.}}{{$genericsShort}}) Remove(entity Entity) {
	if !m.world.Alive(entity) {
		panic("can't remove components from a dead entity")
	}
	m.world.exchange(entity, nil, m.ids, nil)
}
{{end -}}
{{end -}}

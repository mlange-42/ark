{{- define "template" -}}
package ecs

// Code generated by go generate; DO NOT EDIT.

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

{{range makeRange 1 8}}
{{- $n := . -}}
{{- $upper := upperLetters . -}}
{{- $lower := lowerLetters . -}}

{{- $generics := join "[Comp" ", Comp" "]" $upper -}}
{{- $args := arguments $lower $upper "Comp" -}}
{{- $mapArgs := join "&Comp" "{}, &Comp" "{}" $upper -}}
{{- $comps := join "" ", " "" $lower -}}

func TestMap{{.}}(t *testing.T) {
	n := 12
	w := NewWorld(4)

	mapper := NewMap{{.}}{{$generics}}(&w)

	entities := []Entity{}
	for range n {
		e := mapper.NewEntity({{$mapArgs}})
		entities = append(entities, e)
		e = w.NewEntity()
		mapper.Add(e, {{$mapArgs}})
		entities = append(entities, e)
	}

	for _, e := range entities {
		{{blanks .}} = mapper.Get(e)
		assert.True(t, mapper.HasAll(e))
	}

	for _, e := range entities {
		mapper.Remove(e)
	}
}

func TestMap{{.}}NewBatch(t *testing.T) {
	n := 12
	w := NewWorld(8)

	mapper := NewMap{{.}}{{$generics}}(&w)

	for range n {
		_ = mapper.NewEntity({{$mapArgs}})
	}
	mapper.NewBatch(n*2, {{$mapArgs}})

	filter := NewFilter{{.}}{{$generics}}(&w)
	query := filter.Query()
	cnt := 0
	var lastEntity Entity
	for query.Next() {
		{{blanks .}} = query.Get()
		lastEntity = query.Entity()
		cnt++
	}
	assert.True(t, mapper.HasAll(lastEntity))
	assert.Equal(t, n*3, cnt)
}

func TestMap{{.}}NewBatchFn(t *testing.T) {
	n := 12
	w := NewWorld(8)

	mapper := NewMap{{.}}{{$generics}}(&w)

	for range n {
		_ = mapper.NewEntity({{$mapArgs}})
	}
	mapper.NewBatchFn(2*n, func(entity Entity, {{$args}}) {
		a.X = 5
		a.Y = 6
	})

	filter := NewFilter{{.}}{{$generics}}(&w)
	query := filter.Query()
	cnt := 0
	var lastEntity Entity
	for query.Next() {
		{{blanks .}} = query.Get()
		lastEntity = query.Entity()
		cnt++
	}
	assert.True(t, mapper.HasAll(lastEntity))
	assert.Equal(t, 3*n, cnt)
}

{{end -}}
{{end -}}

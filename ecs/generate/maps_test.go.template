{{- define "template" -}}
package ecs

// Code generated by go generate; DO NOT EDIT.

import (
	"testing"
)

{{range makeRange 1 12}}
{{- $n := . -}}
{{- $upper := upperLetters . -}}
{{- $lower := lowerLetters . -}}
{{- $generics := join "[Comp" ", Comp" "]" $upper -}}
{{- $args := arguments $lower $upper "" "Comp" -}}
{{- $mapArgs := join "&Comp" "{}, &Comp" "{}" $upper -}}
{{- $comps := join "" ", " "" $lower -}}
{{- $genericsRel := replace $generics "CompA" "ChildOf" -}}
{{- $mapArgsRel := replace $mapArgs "CompA" "ChildOf" -}}
{{- $nFilter := $n -}}
{{- if gt $n 8}}{{- $nFilter = 8 -}}{{end -}}
{{- $upperFilter := upperLetters $nFilter -}}
{{- $genericsFilter := join "[Comp" ", Comp" "]" $upperFilter -}}
{{- $genericsRelFilter := replace $genericsFilter "CompA" "ChildOf" -}}
{{- $values := join "" ", " "" $lower -}}

func TestMap{{.}}(t *testing.T) {
	n := 12
	w := NewWorld(4)
	var mapper *Map{{.}}{{$generics}}
	mapper = mapper.New(&w)
	mapA := NewMap[CompA](&w)
	entities := []Entity{}
	for range n {
		e := mapper.NewEntity({{$mapArgs}})
		entities = append(entities, e)
		e = w.NewEntity()
		mapper.Add(e, {{$mapArgs}})
		entities = append(entities, e)
		e = mapper.NewEntityFn(func({{$args}}){
			a.X = 100
		})
		if a := mapA.Get(e); a.X != 100 {
			t.Errorf("expected 100, got %f", a.X)
		}
		w.RemoveEntity(e)
		e = w.NewEntity()
		mapper.AddFn(e, func({{$args}}){
			a.X = 100
		})
		if a := mapA.Get(e); a.X != 100 {
			t.Errorf("expected 100, got %f", a.X)
		}
		w.RemoveEntity(e)
	}
	for _, entity := range entities {
		{{$values}} := mapper.Get(entity)
		{{- range $lower}}
		if {{.}} == nil {
			t.Errorf("expected non-nil, got nil")
		}
		{{- end}}
		{{$values}} = mapper.GetUnchecked(entity)
		{{- range $lower}}
		if {{.}} == nil {
			t.Errorf("expected non-nil, got nil")
		}
		{{- end}}
		if !mapper.HasAll(entity) {
			t.Errorf("expected true, got false")
		}
		mapper.Set(entity, {{$mapArgs}})
	}
	for _, e := range entities {
		mapper.Remove(e)
		if mapper.HasAll(e) {
			t.Errorf("expected false, got true")
		}
	}
	expectPanic(t, func(){
		mapper.Get(Entity{})
	})
	expectPanic(t, func(){
		mapper.HasAll(Entity{})
	})
	expectPanic(t, func(){
		mapper.Add(Entity{}, {{$mapArgs}})
	})
	expectPanic(t, func(){
		mapper.Set(Entity{}, {{$mapArgs}})
	})
	expectPanic(t, func(){
		mapper.AddFn(Entity{}, func({{$args}}){})
	})
	expectPanic(t, func(){
		mapper.Remove(Entity{})
	})
}

func TestMap{{.}}Nil(t *testing.T) {
	w := NewWorld(4)
	mapper := NewMap{{.}}{{$generics}}(&w)
	entity := w.NewEntity()
	{{$values}} := mapper.Get(entity)
	{{- range $lower}}
	if {{.}} != nil {
		t.Errorf("expected nil, got %v", {{.}})
	}
	{{- end}}
	{{$values}} = mapper.GetUnchecked(entity)
	{{- range $lower}}
	if {{.}} != nil {
		t.Errorf("expected nil, got %v", {{.}})
	}
	{{- end}}
}

func TestMap{{.}}NewBatch(t *testing.T) {
	n := 12
	w := NewWorld(8)
	mapper := NewMap{{.}}{{$generics}}(&w)
	for range n {
		_ = mapper.NewEntity({{$mapArgs}})
	}
	w.RemoveEntity(w.NewEntity())
	mapper.NewBatch(n*2, {{$mapArgs}})
	filter := NewFilter{{$nFilter}}{{$genericsFilter}}(&w)
	query := filter.Query()
	cnt := 0
	var lastEntity Entity
	for query.Next() {
		{{blanks $nFilter}} = query.Get()
		lastEntity = query.Entity()
		cnt++
	}
	if !mapper.HasAll(lastEntity) {
		t.Errorf("expected true, got false")
	}
	if cnt != n*3 {
		t.Errorf("expected %d, got %d", n*3, cnt)
	}
}

func TestMap{{.}}NewBatchFn(t *testing.T) {
	n := 12
	w := NewWorld(8)
	mapper := NewMap{{.}}{{$generics}}(&w)
	for range n {
		_ = mapper.NewEntity({{$mapArgs}})
	}
	w.RemoveEntity(w.NewEntity())
	mapper.NewBatchFn(2*n, func(entity Entity, {{$args}}) {
		a.X = 5
		a.Y = 6
	})
	filter := NewFilter{{$nFilter}}{{$genericsFilter}}(&w)
	query := filter.Query()
	cnt := 0
	var lastEntity Entity
	for query.Next() {
		{{blanks $nFilter}} = query.Get()
		lastEntity = query.Entity()
		cnt++
	}
	if !mapper.HasAll(lastEntity) {
		t.Errorf("expected true, got false")
	}
	if cnt != 3*n {
		t.Errorf("expected %d, got %d", 3*n, cnt)
	}
	mapper.NewBatchFn(5, nil)
}

func TestMap{{.}}Relations(t *testing.T) {
	w := NewWorld(8)
	mapper := NewMap{{.}}{{$genericsRel}}(&w)
	parent1 := w.NewEntity()
	parent2 := w.NewEntity()
	e := mapper.NewEntity({{$mapArgsRel}}, RelIdx(0, parent1))
	if mapper.GetRelation(e, 0) != parent1 {
		t.Errorf("expected %v, got %v", parent1, mapper.GetRelation(e, 0))
	}
	if mapper.GetRelationUnchecked(e, 0) != parent1 {
		t.Errorf("expected %v, got %v", parent1, mapper.GetRelationUnchecked(e, 0))
	}
	mapper.SetRelations(e, RelIdx(0, parent2))
	if mapper.GetRelation(e, 0) != parent2 {
		t.Errorf("expected %v, got %v", parent2, mapper.GetRelation(e, 0))
	}
	expectPanic(t, func(){
		mapper.SetRelations(Entity{}, RelIdx(0, parent2))
	})
	expectPanic(t, func(){
		mapper.SetRelations(e)
	})
	expectPanic(t, func(){
		mapper.GetRelation(Entity{}, 0)
	})
}

func TestMap{{.}}AddBatch(t *testing.T) {
	n := 12
	w := NewWorld(8)
	mapper := NewMap{{.}}{{$generics}}(&w)
	posMap := NewMap1[Position](&w)
	posVelMap := NewMap2[Position, Velocity](&w)
	cnt := 1
	posMap.NewBatchFn(n, func(entity Entity, pos *Position){
		pos.X = float64(cnt)
		cnt++
	})
	posVelMap.NewBatchFn(n, func(entity Entity, pos *Position, _ *Velocity){
		pos.X = float64(cnt)
		cnt++
	})
	if cnt != 2*n+1 {
		t.Errorf("expected %d, got %d", 2*n+1, cnt)
	}
	filter := NewFilter1[Position](&w)
	mapper.AddBatch(filter.Batch(), {{$mapArgs}})
	filter2 := NewFilter1[CompA](&w)
	query := filter2.Query()
	cnt = 0
	for query.Next() {
		pos := posMap.Get(query.Entity())
		if pos.X <= 0.0 {
			t.Errorf("expected greater than 0.0, got %f", pos.X)
		}
		cnt++
	}
	if cnt != 2*n {
		t.Errorf("expected %d, got %d", 2*n, cnt)
	}
	mapper.RemoveBatch(filter2.Batch(), nil)
	query = filter2.Query()
	cnt = 0
	for query.Next() {
		cnt++
	}
	if cnt != 0 {
		t.Errorf("expected 0, got %d", cnt)
	}
}

func TestMap{{.}}AddBatchFn(t *testing.T) {
	n := 12
	w := NewWorld(8)
	mapper := NewMap{{.}}{{$generics}}(&w)
	posMap := NewMap1[Position](&w)
	posVelMap := NewMap2[Position, Velocity](&w)
	cnt := 1
	posMap.NewBatchFn(n, func(entity Entity, pos *Position){
		pos.X = float64(cnt)
		cnt++
	})
	posVelMap.NewBatchFn(n, func(entity Entity, pos *Position, _ *Velocity){
		pos.X = float64(cnt)
		cnt++
	})
	if cnt != 2*n+1 {
		t.Errorf("expected %d, got %d", 2*n+1, cnt)
	}
	filter := NewFilter1[Position](&w)
	cnt = 0
	mapper.AddBatchFn(filter.Batch(), func(entity Entity, {{$args}}){
		a.X = float64(cnt)
		cnt++
	})
	filter2 := NewFilter1[CompA](&w)
	query := filter2.Query()
	cnt = 0
	for query.Next() {
		a := query.Get()
		if a.X != float64(cnt) {
			t.Errorf("expected %f, got %f", float64(cnt), a.X)
		}
		pos := posMap.Get(query.Entity())
		if pos.X <= 0.0 {
			t.Errorf("expected greater than 0.0, got %f", pos.X)
		}
		cnt++
	}
	if cnt != 2*n {
		t.Errorf("expected %d, got %d", 2*n, cnt)
	}
	cnt = 0
	mapper.RemoveBatch(filter2.Batch(), func(entity Entity){
		cnt++
	})
	if cnt != 2*n {
		t.Errorf("expected %d, got %d", 2*n, cnt)
	}
	query = filter2.Query()
	cnt = 0
	for query.Next() {
		cnt++
	}
	if cnt != 0 {
		t.Errorf("expected 0, got %d", cnt)
	}
}

func TestMap{{.}}SetRelationsBatch(t *testing.T) {
	n := 24
	w := NewWorld(16)
	parent1 := w.NewEntity()
	parent2 := w.NewEntity()
	parent3 := w.NewEntity()
	mapper := NewMap{{.}}{{$genericsRel}}(&w)
	childMap := NewMap[ChildOf](&w)
	mapper.NewBatch(n, {{$mapArgsRel}}, RelIdx(0, parent1))
	mapper.NewBatch(n, {{$mapArgsRel}}, RelIdx(0, parent2))
	filter := NewFilter1[ChildOf](&w)
	mapper.SetRelationsBatch(filter.Batch(RelIdx(0, parent2)), func(entity Entity) {
		if childMap.GetRelation(entity) != parent3 {
			t.Errorf("expected %v, got %v", parent3, childMap.GetRelation(entity))
		}
	}, RelIdx(0, parent3))
	query := filter.Query(RelIdx(0, parent2))
	cnt := 0
	for query.Next() {
		cnt++
	}
	if cnt != 0 {
		t.Errorf("expected 0, got %d", cnt)
	}
	query = filter.Query(RelIdx(0, parent3))
	cnt = 0
	for query.Next() {
		cnt++
	}
	if cnt != n {
		t.Errorf("expected %d, got %d", n, cnt)
	}
	expectPanic(t, func(){
		mapper.SetRelationsBatch(filter.Batch(RelIdx(0, parent2)), func(entity Entity) {})
	})
}
{{end -}}
{{end -}}
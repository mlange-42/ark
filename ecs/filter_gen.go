package ecs

// Code generated by go generate; DO NOT EDIT.

// Filter0 is a filter for 0 components.
type Filter0 struct {
	world   *World
	ids     []ID
	mask    Mask
	without Mask
}

// NewFilter0 creates a new [Filter0].
//
// Use [Filter0.Query] to obtain a [Query0].
func NewFilter0(world *World) *Filter0 {
	ids := []ID{}

	return &Filter0{
		world: world,
		ids:   ids,
		mask:  All(ids...),
	}
}

// With specifies additional components to filter for.
func (q *Filter0) With(comps ...Comp) *Filter0 {
	for _, c := range comps {
		id := q.world.componentID(c.tp)
		q.mask.Set(id, true)
	}
	return q
}

// With specifies components to exclude.
func (q *Filter0) Without(comps ...Comp) *Filter0 {
	for _, c := range comps {
		id := q.world.componentID(c.tp)
		q.without.Set(id, true)
	}
	return q
}

// Query creates a [Query0] from this filter.
// This must be used each time before iterating a query.
func (q *Filter0) Query() Query0 {
	return newQuery0(q.world, q.mask, q.without)
}

// Filter1 is a filter for 1 components.
type Filter1[A any] struct {
	world   *World
	ids     []ID
	mask    Mask
	without Mask
}

// NewFilter1 creates a new [Filter1].
//
// Use [Filter1.Query] to obtain a [Query1].
func NewFilter1[A any](world *World) *Filter1[A] {
	ids := []ID{
		ComponentID[A](world),
	}

	return &Filter1[A]{
		world: world,
		ids:   ids,
		mask:  All(ids...),
	}
}

// With specifies additional components to filter for.
func (q *Filter1[A]) With(comps ...Comp) *Filter1[A] {
	for _, c := range comps {
		id := q.world.componentID(c.tp)
		q.mask.Set(id, true)
	}
	return q
}

// With specifies components to exclude.
func (q *Filter1[A]) Without(comps ...Comp) *Filter1[A] {
	for _, c := range comps {
		id := q.world.componentID(c.tp)
		q.without.Set(id, true)
	}
	return q
}

// Query creates a [Query1] from this filter.
// This must be used each time before iterating a query.
func (q *Filter1[A]) Query() Query1[A] {
	return newQuery1[A](q.world, q.mask, q.without, q.ids)
}

// Filter2 is a filter for 2 components.
type Filter2[A any, B any] struct {
	world   *World
	ids     []ID
	mask    Mask
	without Mask
}

// NewFilter2 creates a new [Filter2].
//
// Use [Filter2.Query] to obtain a [Query2].
func NewFilter2[A any, B any](world *World) *Filter2[A, B] {
	ids := []ID{
		ComponentID[A](world),
		ComponentID[B](world),
	}

	return &Filter2[A, B]{
		world: world,
		ids:   ids,
		mask:  All(ids...),
	}
}

// With specifies additional components to filter for.
func (q *Filter2[A, B]) With(comps ...Comp) *Filter2[A, B] {
	for _, c := range comps {
		id := q.world.componentID(c.tp)
		q.mask.Set(id, true)
	}
	return q
}

// With specifies components to exclude.
func (q *Filter2[A, B]) Without(comps ...Comp) *Filter2[A, B] {
	for _, c := range comps {
		id := q.world.componentID(c.tp)
		q.without.Set(id, true)
	}
	return q
}

// Query creates a [Query2] from this filter.
// This must be used each time before iterating a query.
func (q *Filter2[A, B]) Query() Query2[A, B] {
	return newQuery2[A, B](q.world, q.mask, q.without, q.ids)
}

// Filter3 is a filter for 3 components.
type Filter3[A any, B any, C any] struct {
	world   *World
	ids     []ID
	mask    Mask
	without Mask
}

// NewFilter3 creates a new [Filter3].
//
// Use [Filter3.Query] to obtain a [Query3].
func NewFilter3[A any, B any, C any](world *World) *Filter3[A, B, C] {
	ids := []ID{
		ComponentID[A](world),
		ComponentID[B](world),
		ComponentID[C](world),
	}

	return &Filter3[A, B, C]{
		world: world,
		ids:   ids,
		mask:  All(ids...),
	}
}

// With specifies additional components to filter for.
func (q *Filter3[A, B, C]) With(comps ...Comp) *Filter3[A, B, C] {
	for _, c := range comps {
		id := q.world.componentID(c.tp)
		q.mask.Set(id, true)
	}
	return q
}

// With specifies components to exclude.
func (q *Filter3[A, B, C]) Without(comps ...Comp) *Filter3[A, B, C] {
	for _, c := range comps {
		id := q.world.componentID(c.tp)
		q.without.Set(id, true)
	}
	return q
}

// Query creates a [Query3] from this filter.
// This must be used each time before iterating a query.
func (q *Filter3[A, B, C]) Query() Query3[A, B, C] {
	return newQuery3[A, B, C](q.world, q.mask, q.without, q.ids)
}

// Filter4 is a filter for 4 components.
type Filter4[A any, B any, C any, D any] struct {
	world   *World
	ids     []ID
	mask    Mask
	without Mask
}

// NewFilter4 creates a new [Filter4].
//
// Use [Filter4.Query] to obtain a [Query4].
func NewFilter4[A any, B any, C any, D any](world *World) *Filter4[A, B, C, D] {
	ids := []ID{
		ComponentID[A](world),
		ComponentID[B](world),
		ComponentID[C](world),
		ComponentID[D](world),
	}

	return &Filter4[A, B, C, D]{
		world: world,
		ids:   ids,
		mask:  All(ids...),
	}
}

// With specifies additional components to filter for.
func (q *Filter4[A, B, C, D]) With(comps ...Comp) *Filter4[A, B, C, D] {
	for _, c := range comps {
		id := q.world.componentID(c.tp)
		q.mask.Set(id, true)
	}
	return q
}

// With specifies components to exclude.
func (q *Filter4[A, B, C, D]) Without(comps ...Comp) *Filter4[A, B, C, D] {
	for _, c := range comps {
		id := q.world.componentID(c.tp)
		q.without.Set(id, true)
	}
	return q
}

// Query creates a [Query4] from this filter.
// This must be used each time before iterating a query.
func (q *Filter4[A, B, C, D]) Query() Query4[A, B, C, D] {
	return newQuery4[A, B, C, D](q.world, q.mask, q.without, q.ids)
}

// Filter5 is a filter for 5 components.
type Filter5[A any, B any, C any, D any, E any] struct {
	world   *World
	ids     []ID
	mask    Mask
	without Mask
}

// NewFilter5 creates a new [Filter5].
//
// Use [Filter5.Query] to obtain a [Query5].
func NewFilter5[A any, B any, C any, D any, E any](world *World) *Filter5[A, B, C, D, E] {
	ids := []ID{
		ComponentID[A](world),
		ComponentID[B](world),
		ComponentID[C](world),
		ComponentID[D](world),
		ComponentID[E](world),
	}

	return &Filter5[A, B, C, D, E]{
		world: world,
		ids:   ids,
		mask:  All(ids...),
	}
}

// With specifies additional components to filter for.
func (q *Filter5[A, B, C, D, E]) With(comps ...Comp) *Filter5[A, B, C, D, E] {
	for _, c := range comps {
		id := q.world.componentID(c.tp)
		q.mask.Set(id, true)
	}
	return q
}

// With specifies components to exclude.
func (q *Filter5[A, B, C, D, E]) Without(comps ...Comp) *Filter5[A, B, C, D, E] {
	for _, c := range comps {
		id := q.world.componentID(c.tp)
		q.without.Set(id, true)
	}
	return q
}

// Query creates a [Query5] from this filter.
// This must be used each time before iterating a query.
func (q *Filter5[A, B, C, D, E]) Query() Query5[A, B, C, D, E] {
	return newQuery5[A, B, C, D, E](q.world, q.mask, q.without, q.ids)
}

// Filter6 is a filter for 6 components.
type Filter6[A any, B any, C any, D any, E any, F any] struct {
	world   *World
	ids     []ID
	mask    Mask
	without Mask
}

// NewFilter6 creates a new [Filter6].
//
// Use [Filter6.Query] to obtain a [Query6].
func NewFilter6[A any, B any, C any, D any, E any, F any](world *World) *Filter6[A, B, C, D, E, F] {
	ids := []ID{
		ComponentID[A](world),
		ComponentID[B](world),
		ComponentID[C](world),
		ComponentID[D](world),
		ComponentID[E](world),
		ComponentID[F](world),
	}

	return &Filter6[A, B, C, D, E, F]{
		world: world,
		ids:   ids,
		mask:  All(ids...),
	}
}

// With specifies additional components to filter for.
func (q *Filter6[A, B, C, D, E, F]) With(comps ...Comp) *Filter6[A, B, C, D, E, F] {
	for _, c := range comps {
		id := q.world.componentID(c.tp)
		q.mask.Set(id, true)
	}
	return q
}

// With specifies components to exclude.
func (q *Filter6[A, B, C, D, E, F]) Without(comps ...Comp) *Filter6[A, B, C, D, E, F] {
	for _, c := range comps {
		id := q.world.componentID(c.tp)
		q.without.Set(id, true)
	}
	return q
}

// Query creates a [Query6] from this filter.
// This must be used each time before iterating a query.
func (q *Filter6[A, B, C, D, E, F]) Query() Query6[A, B, C, D, E, F] {
	return newQuery6[A, B, C, D, E, F](q.world, q.mask, q.without, q.ids)
}

// Filter7 is a filter for 7 components.
type Filter7[A any, B any, C any, D any, E any, F any, G any] struct {
	world   *World
	ids     []ID
	mask    Mask
	without Mask
}

// NewFilter7 creates a new [Filter7].
//
// Use [Filter7.Query] to obtain a [Query7].
func NewFilter7[A any, B any, C any, D any, E any, F any, G any](world *World) *Filter7[A, B, C, D, E, F, G] {
	ids := []ID{
		ComponentID[A](world),
		ComponentID[B](world),
		ComponentID[C](world),
		ComponentID[D](world),
		ComponentID[E](world),
		ComponentID[F](world),
		ComponentID[G](world),
	}

	return &Filter7[A, B, C, D, E, F, G]{
		world: world,
		ids:   ids,
		mask:  All(ids...),
	}
}

// With specifies additional components to filter for.
func (q *Filter7[A, B, C, D, E, F, G]) With(comps ...Comp) *Filter7[A, B, C, D, E, F, G] {
	for _, c := range comps {
		id := q.world.componentID(c.tp)
		q.mask.Set(id, true)
	}
	return q
}

// With specifies components to exclude.
func (q *Filter7[A, B, C, D, E, F, G]) Without(comps ...Comp) *Filter7[A, B, C, D, E, F, G] {
	for _, c := range comps {
		id := q.world.componentID(c.tp)
		q.without.Set(id, true)
	}
	return q
}

// Query creates a [Query7] from this filter.
// This must be used each time before iterating a query.
func (q *Filter7[A, B, C, D, E, F, G]) Query() Query7[A, B, C, D, E, F, G] {
	return newQuery7[A, B, C, D, E, F, G](q.world, q.mask, q.without, q.ids)
}

// Filter8 is a filter for 8 components.
type Filter8[A any, B any, C any, D any, E any, F any, G any, H any] struct {
	world   *World
	ids     []ID
	mask    Mask
	without Mask
}

// NewFilter8 creates a new [Filter8].
//
// Use [Filter8.Query] to obtain a [Query8].
func NewFilter8[A any, B any, C any, D any, E any, F any, G any, H any](world *World) *Filter8[A, B, C, D, E, F, G, H] {
	ids := []ID{
		ComponentID[A](world),
		ComponentID[B](world),
		ComponentID[C](world),
		ComponentID[D](world),
		ComponentID[E](world),
		ComponentID[F](world),
		ComponentID[G](world),
		ComponentID[H](world),
	}

	return &Filter8[A, B, C, D, E, F, G, H]{
		world: world,
		ids:   ids,
		mask:  All(ids...),
	}
}

// With specifies additional components to filter for.
func (q *Filter8[A, B, C, D, E, F, G, H]) With(comps ...Comp) *Filter8[A, B, C, D, E, F, G, H] {
	for _, c := range comps {
		id := q.world.componentID(c.tp)
		q.mask.Set(id, true)
	}
	return q
}

// With specifies components to exclude.
func (q *Filter8[A, B, C, D, E, F, G, H]) Without(comps ...Comp) *Filter8[A, B, C, D, E, F, G, H] {
	for _, c := range comps {
		id := q.world.componentID(c.tp)
		q.without.Set(id, true)
	}
	return q
}

// Query creates a [Query8] from this filter.
// This must be used each time before iterating a query.
func (q *Filter8[A, B, C, D, E, F, G, H]) Query() Query8[A, B, C, D, E, F, G, H] {
	return newQuery8[A, B, C, D, E, F, G, H](q.world, q.mask, q.without, q.ids)
}

package ecs

// Code generated by go generate; DO NOT EDIT.

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestExchange1(t *testing.T) {
	w := NewWorld(16)

	posMap := NewMap2[Position, Velocity](&w)
	mapper := NewMap1[CompA](&w)
	ex := NewExchange1[CompA](&w).Removes(C[Velocity](), C[Position]())

	e := posMap.NewEntity(&Position{}, &Velocity{})

	ex.Exchange(e, &CompA{})
	assert.False(t, posMap.HasAll(e))
	assert.True(t, mapper.HasAll(e))
}

func TestExchange1Add(t *testing.T) {
	w := NewWorld(16)

	posMap := NewMap2[Position, Velocity](&w)
	mapper := NewMap1[CompA](&w)
	ex := NewExchange1[CompA](&w).Removes(C[Velocity](), C[Position]())

	e := posMap.NewEntity(&Position{}, &Velocity{})

	ex.Add(e, &CompA{})
	assert.True(t, posMap.HasAll(e))
	assert.True(t, mapper.HasAll(e))
}

func TestExchange1Remove(t *testing.T) {
	w := NewWorld(16)

	posMap := NewMap2[Position, Velocity](&w)
	mapper := NewMap1[CompA](&w)
	ex := NewExchange1[CompA](&w).Removes(C[Velocity](), C[Position]())

	e := posMap.NewEntity(&Position{}, &Velocity{})

	ex.Remove(e)
	assert.False(t, posMap.HasAll(e))
	assert.False(t, mapper.HasAll(e))
}
func TestExchange2(t *testing.T) {
	w := NewWorld(16)

	posMap := NewMap2[Position, Velocity](&w)
	mapper := NewMap2[CompA, CompB](&w)
	ex := NewExchange2[CompA, CompB](&w).Removes(C[Velocity](), C[Position]())

	e := posMap.NewEntity(&Position{}, &Velocity{})

	ex.Exchange(e, &CompA{}, &CompB{})
	assert.False(t, posMap.HasAll(e))
	assert.True(t, mapper.HasAll(e))
}

func TestExchange2Add(t *testing.T) {
	w := NewWorld(16)

	posMap := NewMap2[Position, Velocity](&w)
	mapper := NewMap2[CompA, CompB](&w)
	ex := NewExchange2[CompA, CompB](&w).Removes(C[Velocity](), C[Position]())

	e := posMap.NewEntity(&Position{}, &Velocity{})

	ex.Add(e, &CompA{}, &CompB{})
	assert.True(t, posMap.HasAll(e))
	assert.True(t, mapper.HasAll(e))
}

func TestExchange2Remove(t *testing.T) {
	w := NewWorld(16)

	posMap := NewMap2[Position, Velocity](&w)
	mapper := NewMap2[CompA, CompB](&w)
	ex := NewExchange2[CompA, CompB](&w).Removes(C[Velocity](), C[Position]())

	e := posMap.NewEntity(&Position{}, &Velocity{})

	ex.Remove(e)
	assert.False(t, posMap.HasAll(e))
	assert.False(t, mapper.HasAll(e))
}
func TestExchange3(t *testing.T) {
	w := NewWorld(16)

	posMap := NewMap2[Position, Velocity](&w)
	mapper := NewMap3[CompA, CompB, CompC](&w)
	ex := NewExchange3[CompA, CompB, CompC](&w).Removes(C[Velocity](), C[Position]())

	e := posMap.NewEntity(&Position{}, &Velocity{})

	ex.Exchange(e, &CompA{}, &CompB{}, &CompC{})
	assert.False(t, posMap.HasAll(e))
	assert.True(t, mapper.HasAll(e))
}

func TestExchange3Add(t *testing.T) {
	w := NewWorld(16)

	posMap := NewMap2[Position, Velocity](&w)
	mapper := NewMap3[CompA, CompB, CompC](&w)
	ex := NewExchange3[CompA, CompB, CompC](&w).Removes(C[Velocity](), C[Position]())

	e := posMap.NewEntity(&Position{}, &Velocity{})

	ex.Add(e, &CompA{}, &CompB{}, &CompC{})
	assert.True(t, posMap.HasAll(e))
	assert.True(t, mapper.HasAll(e))
}

func TestExchange3Remove(t *testing.T) {
	w := NewWorld(16)

	posMap := NewMap2[Position, Velocity](&w)
	mapper := NewMap3[CompA, CompB, CompC](&w)
	ex := NewExchange3[CompA, CompB, CompC](&w).Removes(C[Velocity](), C[Position]())

	e := posMap.NewEntity(&Position{}, &Velocity{})

	ex.Remove(e)
	assert.False(t, posMap.HasAll(e))
	assert.False(t, mapper.HasAll(e))
}
func TestExchange4(t *testing.T) {
	w := NewWorld(16)

	posMap := NewMap2[Position, Velocity](&w)
	mapper := NewMap4[CompA, CompB, CompC, CompD](&w)
	ex := NewExchange4[CompA, CompB, CompC, CompD](&w).Removes(C[Velocity](), C[Position]())

	e := posMap.NewEntity(&Position{}, &Velocity{})

	ex.Exchange(e, &CompA{}, &CompB{}, &CompC{}, &CompD{})
	assert.False(t, posMap.HasAll(e))
	assert.True(t, mapper.HasAll(e))
}

func TestExchange4Add(t *testing.T) {
	w := NewWorld(16)

	posMap := NewMap2[Position, Velocity](&w)
	mapper := NewMap4[CompA, CompB, CompC, CompD](&w)
	ex := NewExchange4[CompA, CompB, CompC, CompD](&w).Removes(C[Velocity](), C[Position]())

	e := posMap.NewEntity(&Position{}, &Velocity{})

	ex.Add(e, &CompA{}, &CompB{}, &CompC{}, &CompD{})
	assert.True(t, posMap.HasAll(e))
	assert.True(t, mapper.HasAll(e))
}

func TestExchange4Remove(t *testing.T) {
	w := NewWorld(16)

	posMap := NewMap2[Position, Velocity](&w)
	mapper := NewMap4[CompA, CompB, CompC, CompD](&w)
	ex := NewExchange4[CompA, CompB, CompC, CompD](&w).Removes(C[Velocity](), C[Position]())

	e := posMap.NewEntity(&Position{}, &Velocity{})

	ex.Remove(e)
	assert.False(t, posMap.HasAll(e))
	assert.False(t, mapper.HasAll(e))
}
func TestExchange5(t *testing.T) {
	w := NewWorld(16)

	posMap := NewMap2[Position, Velocity](&w)
	mapper := NewMap5[CompA, CompB, CompC, CompD, CompE](&w)
	ex := NewExchange5[CompA, CompB, CompC, CompD, CompE](&w).Removes(C[Velocity](), C[Position]())

	e := posMap.NewEntity(&Position{}, &Velocity{})

	ex.Exchange(e, &CompA{}, &CompB{}, &CompC{}, &CompD{}, &CompE{})
	assert.False(t, posMap.HasAll(e))
	assert.True(t, mapper.HasAll(e))
}

func TestExchange5Add(t *testing.T) {
	w := NewWorld(16)

	posMap := NewMap2[Position, Velocity](&w)
	mapper := NewMap5[CompA, CompB, CompC, CompD, CompE](&w)
	ex := NewExchange5[CompA, CompB, CompC, CompD, CompE](&w).Removes(C[Velocity](), C[Position]())

	e := posMap.NewEntity(&Position{}, &Velocity{})

	ex.Add(e, &CompA{}, &CompB{}, &CompC{}, &CompD{}, &CompE{})
	assert.True(t, posMap.HasAll(e))
	assert.True(t, mapper.HasAll(e))
}

func TestExchange5Remove(t *testing.T) {
	w := NewWorld(16)

	posMap := NewMap2[Position, Velocity](&w)
	mapper := NewMap5[CompA, CompB, CompC, CompD, CompE](&w)
	ex := NewExchange5[CompA, CompB, CompC, CompD, CompE](&w).Removes(C[Velocity](), C[Position]())

	e := posMap.NewEntity(&Position{}, &Velocity{})

	ex.Remove(e)
	assert.False(t, posMap.HasAll(e))
	assert.False(t, mapper.HasAll(e))
}
func TestExchange6(t *testing.T) {
	w := NewWorld(16)

	posMap := NewMap2[Position, Velocity](&w)
	mapper := NewMap6[CompA, CompB, CompC, CompD, CompE, CompF](&w)
	ex := NewExchange6[CompA, CompB, CompC, CompD, CompE, CompF](&w).Removes(C[Velocity](), C[Position]())

	e := posMap.NewEntity(&Position{}, &Velocity{})

	ex.Exchange(e, &CompA{}, &CompB{}, &CompC{}, &CompD{}, &CompE{}, &CompF{})
	assert.False(t, posMap.HasAll(e))
	assert.True(t, mapper.HasAll(e))
}

func TestExchange6Add(t *testing.T) {
	w := NewWorld(16)

	posMap := NewMap2[Position, Velocity](&w)
	mapper := NewMap6[CompA, CompB, CompC, CompD, CompE, CompF](&w)
	ex := NewExchange6[CompA, CompB, CompC, CompD, CompE, CompF](&w).Removes(C[Velocity](), C[Position]())

	e := posMap.NewEntity(&Position{}, &Velocity{})

	ex.Add(e, &CompA{}, &CompB{}, &CompC{}, &CompD{}, &CompE{}, &CompF{})
	assert.True(t, posMap.HasAll(e))
	assert.True(t, mapper.HasAll(e))
}

func TestExchange6Remove(t *testing.T) {
	w := NewWorld(16)

	posMap := NewMap2[Position, Velocity](&w)
	mapper := NewMap6[CompA, CompB, CompC, CompD, CompE, CompF](&w)
	ex := NewExchange6[CompA, CompB, CompC, CompD, CompE, CompF](&w).Removes(C[Velocity](), C[Position]())

	e := posMap.NewEntity(&Position{}, &Velocity{})

	ex.Remove(e)
	assert.False(t, posMap.HasAll(e))
	assert.False(t, mapper.HasAll(e))
}
func TestExchange7(t *testing.T) {
	w := NewWorld(16)

	posMap := NewMap2[Position, Velocity](&w)
	mapper := NewMap7[CompA, CompB, CompC, CompD, CompE, CompF, CompG](&w)
	ex := NewExchange7[CompA, CompB, CompC, CompD, CompE, CompF, CompG](&w).Removes(C[Velocity](), C[Position]())

	e := posMap.NewEntity(&Position{}, &Velocity{})

	ex.Exchange(e, &CompA{}, &CompB{}, &CompC{}, &CompD{}, &CompE{}, &CompF{}, &CompG{})
	assert.False(t, posMap.HasAll(e))
	assert.True(t, mapper.HasAll(e))
}

func TestExchange7Add(t *testing.T) {
	w := NewWorld(16)

	posMap := NewMap2[Position, Velocity](&w)
	mapper := NewMap7[CompA, CompB, CompC, CompD, CompE, CompF, CompG](&w)
	ex := NewExchange7[CompA, CompB, CompC, CompD, CompE, CompF, CompG](&w).Removes(C[Velocity](), C[Position]())

	e := posMap.NewEntity(&Position{}, &Velocity{})

	ex.Add(e, &CompA{}, &CompB{}, &CompC{}, &CompD{}, &CompE{}, &CompF{}, &CompG{})
	assert.True(t, posMap.HasAll(e))
	assert.True(t, mapper.HasAll(e))
}

func TestExchange7Remove(t *testing.T) {
	w := NewWorld(16)

	posMap := NewMap2[Position, Velocity](&w)
	mapper := NewMap7[CompA, CompB, CompC, CompD, CompE, CompF, CompG](&w)
	ex := NewExchange7[CompA, CompB, CompC, CompD, CompE, CompF, CompG](&w).Removes(C[Velocity](), C[Position]())

	e := posMap.NewEntity(&Position{}, &Velocity{})

	ex.Remove(e)
	assert.False(t, posMap.HasAll(e))
	assert.False(t, mapper.HasAll(e))
}
func TestExchange8(t *testing.T) {
	w := NewWorld(16)

	posMap := NewMap2[Position, Velocity](&w)
	mapper := NewMap8[CompA, CompB, CompC, CompD, CompE, CompF, CompG, CompH](&w)
	ex := NewExchange8[CompA, CompB, CompC, CompD, CompE, CompF, CompG, CompH](&w).Removes(C[Velocity](), C[Position]())

	e := posMap.NewEntity(&Position{}, &Velocity{})

	ex.Exchange(e, &CompA{}, &CompB{}, &CompC{}, &CompD{}, &CompE{}, &CompF{}, &CompG{}, &CompH{})
	assert.False(t, posMap.HasAll(e))
	assert.True(t, mapper.HasAll(e))
}

func TestExchange8Add(t *testing.T) {
	w := NewWorld(16)

	posMap := NewMap2[Position, Velocity](&w)
	mapper := NewMap8[CompA, CompB, CompC, CompD, CompE, CompF, CompG, CompH](&w)
	ex := NewExchange8[CompA, CompB, CompC, CompD, CompE, CompF, CompG, CompH](&w).Removes(C[Velocity](), C[Position]())

	e := posMap.NewEntity(&Position{}, &Velocity{})

	ex.Add(e, &CompA{}, &CompB{}, &CompC{}, &CompD{}, &CompE{}, &CompF{}, &CompG{}, &CompH{})
	assert.True(t, posMap.HasAll(e))
	assert.True(t, mapper.HasAll(e))
}

func TestExchange8Remove(t *testing.T) {
	w := NewWorld(16)

	posMap := NewMap2[Position, Velocity](&w)
	mapper := NewMap8[CompA, CompB, CompC, CompD, CompE, CompF, CompG, CompH](&w)
	ex := NewExchange8[CompA, CompB, CompC, CompD, CompE, CompF, CompG, CompH](&w).Removes(C[Velocity](), C[Position]())

	e := posMap.NewEntity(&Position{}, &Velocity{})

	ex.Remove(e)
	assert.False(t, posMap.HasAll(e))
	assert.False(t, mapper.HasAll(e))
}

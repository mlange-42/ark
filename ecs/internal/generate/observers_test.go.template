{{- define "template" -}}
package ecs

// Code generated by go generate; DO NOT EDIT.

import "testing"

{{range makeRange 1 4}}
{{- $n := . -}}
{{- $upper := upperLetters . -}}
{{- $lower := lowerLetters . -}}

{{- $generics := join "[Comp" ", Comp" "]" $upper -}}
{{- $args := arguments $lower $upper "" "Comp" -}}
{{- $mapArgs := join "&Comp" "{}, &Comp" "{}" $upper -}}
{{- $comps := join "" ", " "" $lower -}}

func TestObserve{{.}}(t *testing.T) {
	w := NewWorld()
	obs := Observe{{.}}{{$generics}}(OnAddComponents).Do(func(e Entity, {{$args}}) {}).Register(&w)

	expectPanicsWithValue(t, "can't modify a registered observer",
		func() {
			obs.For(C[Position]())
		})
	expectPanicsWithValue(t, "can't modify a registered observer",
		func() {
			obs.With(C[Position]())
		})
	expectPanicsWithValue(t, "can't modify a registered observer",
		func() {
			obs.Without(C[Position]())
		})
	expectPanicsWithValue(t, "can't modify a registered observer",
		func() {
			obs.Exclusive()
		})

	expectPanicsWithValue(t, "observer callback must be set via Do before registering",
		func() {
			Observe{{.}}{{$generics}}(OnCreateEntity).Register(&w)
		})
	expectPanicsWithValue(t, "observer already has a callback",
		func() {
			Observe{{.}}{{$generics}}(OnCreateEntity).
				Do(func(e Entity, {{$args}}) {}).
				Do(func(e Entity, {{$args}}) {})
		})

	obs = Observe{{.}}{{$generics}}(OnAddComponents).Do(func(e Entity, {{$args}}) {})

	obs = obs.For()
	expectEqual(t, 0, len(obs.observer.comps))
	expectFalse(t, obs.observer.hasComps)

	obs = obs.For(C[Position]())
	expectEqual(t, 1, len(obs.observer.comps))
	expectTrue(t, obs.observer.hasComps)

	obs = obs.With()
	expectEqual(t, 0, len(obs.observer.with))
	expectFalse(t, obs.observer.hasWith)

	obs = obs.With(C[Position]())
	expectEqual(t, 1, len(obs.observer.with))
	expectTrue(t, obs.observer.hasWith)

	obs = obs.Without()
	expectEqual(t, 0, len(obs.observer.without))
	expectFalse(t, obs.observer.hasWithout)

	obs = obs.Without(C[Position]())
	expectEqual(t, 1, len(obs.observer.without))
	expectTrue(t, obs.observer.hasWithout)
}

func TestObserver{{.}}Register(t *testing.T) {
	w := NewWorld()

	obs1 := Observe{{.}}{{$generics}}(OnCreateEntity).
		With(C[Position]()).
		Without(C[Heading]()).
		Do(func(e Entity, {{$args}}) {}).
		Register(&w)
	expectTrue(t, w.storage.observers.HasObservers(OnCreateEntity))

	obs2 := Observe{{.}}{{$generics}}(OnCreateEntity).
		With(C[Position]()).
		Do(func(e Entity, {{$args}}) {}).
		Register(&w)

	expectPanicsWithValue(t, "observer is already registered",
		func() {
			obs1.Register(&w)
		})

	obs1.Unregister(&w)
	expectTrue(t, w.storage.observers.HasObservers(OnCreateEntity))
	obs2.Unregister(&w)
	expectFalse(t, w.storage.observers.HasObservers(OnCreateEntity))
}

func TestObserver{{.}}Callback(t *testing.T) {
	w := NewWorld()
	builder := NewMap{{.}}{{$generics}}(&w)

	Observe{{.}}{{$generics}}(OnCreateEntity).
		Do(func(e Entity, {{$args}}) {
			expectEqual(t, CompA{}, *a)
		}).
		Register(&w)

	builder.NewEntity(
        {{- range $i, $v := $upper}}
		&Comp{{$v}}{},
        {{- end}}
	)
}

{{end -}}
{{end -}}
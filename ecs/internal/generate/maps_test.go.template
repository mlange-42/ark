{{- define "template" -}}
package ecs

// Code generated by go generate; DO NOT EDIT.

import "testing"

{{range makeRange 1 12}}
{{- $n := . -}}
{{- $upper := upperLetters . -}}
{{- $lower := lowerLetters . -}}

{{- $generics := join "[Comp" ", Comp" "]" $upper -}}
{{- $args := arguments $lower $upper "" "Comp" -}}
{{- $mapArgs := join "&Comp" "{}, &Comp" "{}" $upper -}}
{{- $comps := join "" ", " "" $lower -}}

{{- $genericsRel := replace $generics "CompA" "ChildOf" -}}
{{- $mapArgsRel := replace $mapArgs "CompA" "ChildOf" -}}

{{- $nFilter := $n -}}
{{- if gt $n 8}}{{- $nFilter = 8 -}}{{end -}}
{{- $upperFilter := upperLetters $nFilter -}}
{{- $genericsFilter := join "[Comp" ", Comp" "]" $upperFilter -}}
{{- $genericsRelFilter := replace $genericsFilter "CompA" "ChildOf" -}}
{{- $values := join "" ", " "" $lower -}}

func TestMap{{.}}(t *testing.T) {
	n := 12
	w := NewWorld(4)

	NewObserver(OnCreateEntity).Do(func(_ Entity){}).Register(&w)

	var mapper *Map{{.}}{{$generics}}
	mapper = mapper.New(&w)
	mapA := NewMap[CompA](&w)

	entities := []Entity{}
	for range n {
		e := mapper.NewEntity({{$mapArgs}})
		entities = append(entities, e)
		e = w.NewEntity()
		mapper.Add(e, {{$mapArgs}})
		entities = append(entities, e)

		e = mapper.NewEntityFn(func({{$args}}){
			a.X = 100
		})
		expectEqual(t, CompA{100, 0}, *mapA.Get(e))
		w.RemoveEntity(e)
		e = w.NewEntity()
		mapper.AddFn(e, func({{$args}}){
			a.X = 100
		})
		expectEqual(t, CompA{100, 0}, *mapA.Get(e))
		w.RemoveEntity(e)
	}

	for _, entity := range entities {
		{{$values}} := mapper.Get(entity)
		{{- range $lower}}
		expectNotNil(t, {{.}})
		{{- end}}
		{{$values}} = mapper.GetUnchecked(entity)
		{{- range $lower}}
		expectNotNil(t, {{.}})
		{{- end}}
		expectTrue(t, mapper.HasAll(entity))
		mapper.Set(entity, {{$mapArgs}})
	}

	for _, e := range entities {
		mapper.Remove(e)
		expectFalse(t, mapper.HasAll(e))
	}

	expectPanics(t, func(){
		mapper.Get(Entity{})
	})
	expectPanics(t, func(){
		mapper.HasAll(Entity{})
	})
	expectPanics(t, func(){
		mapper.Add(Entity{}, {{$mapArgs}})
	})
	expectPanics(t, func(){
		mapper.Set(Entity{}, {{$mapArgs}})
	})
	expectPanics(t, func(){
		mapper.AddFn(Entity{}, func({{$args}}){})
	})
	expectPanics(t, func(){
		mapper.Remove(Entity{})
	})
}

func TestMap{{.}}Nil(t *testing.T) {
	w := NewWorld(4)

	mapper := NewMap{{.}}{{$generics}}(&w)
	entity := w.NewEntity()

	{{$values}} := mapper.Get(entity)
	{{- range $lower}}
	expectNil(t, {{.}})
	{{- end}}
	
	{{$values}} = mapper.GetUnchecked(entity)
	{{- range $lower}}
	expectNil(t, {{.}})
	{{- end}}
}

func TestMap{{.}}NewBatch(t *testing.T) {
	n := 12
	w := NewWorld(8)
	
	NewObserver(OnCreateEntity).Do(func(_ Entity){}).Register(&w)

	mapper := NewMap{{.}}{{$generics}}(&w)

	for range n {
		_ = mapper.NewEntity({{$mapArgs}})
	}
	w.RemoveEntity(w.NewEntity())
	mapper.NewBatch(n*2, {{$mapArgs}})

	filter := NewFilter{{$nFilter}}{{$genericsFilter}}(&w)
	query := filter.Query()
	cnt := 0
	var lastEntity Entity
	for query.Next() {
		{{blanks $nFilter}} = query.Get()
		lastEntity = query.Entity()
		cnt++
	}
	expectTrue(t, mapper.HasAll(lastEntity))
	expectEqual(t, n*3, cnt)
}

func TestMap{{.}}NewBatchFn(t *testing.T) {
	n := 12
	w := NewWorld(8)

	mapper := NewMap{{.}}{{$generics}}(&w)

	for range n {
		_ = mapper.NewEntity({{$mapArgs}})
	}
	w.RemoveEntity(w.NewEntity())
	mapper.NewBatchFn(2*n, func(entity Entity, {{$args}}) {
		a.X = 5
		a.Y = 6
	})

	filter := NewFilter{{$nFilter}}{{$genericsFilter}}(&w)
	query := filter.Query()
	cnt := 0
	var lastEntity Entity
	for query.Next() {
		{{blanks $nFilter}} = query.Get()
		lastEntity = query.Entity()
		cnt++
	}
	expectTrue(t, mapper.HasAll(lastEntity))
	expectEqual(t, 3*n, cnt)

	mapper.NewBatchFn(5, nil)
}

func TestMap{{.}}Relations(t *testing.T) {
	w := NewWorld(8)

	mapper := NewMap{{.}}{{$genericsRel}}(&w)

	parent1 := w.NewEntity()
	parent2 := w.NewEntity()

	e := mapper.NewEntity({{$mapArgsRel}}, RelIdx(0, parent1))
	expectEqual(t, parent1, mapper.GetRelation(e, 0))
	expectEqual(t, parent1, mapper.GetRelationUnchecked(e, 0))

	mapper.SetRelations(e, RelIdx(0, parent2))
	expectEqual(t, parent2, mapper.GetRelation(e, 0))

	expectPanics(t, func(){
		mapper.SetRelations(Entity{}, RelIdx(0, parent2))
	})
	expectPanics(t, func(){
		mapper.SetRelations(e)
	})
	expectPanics(t, func(){
		mapper.GetRelation(Entity{}, 0)
	})
}

func TestMap{{.}}AddBatch(t *testing.T) {
	n := 12
	w := NewWorld(8)

	mapper := NewMap{{.}}{{$generics}}(&w)
	posMap := NewMap1[Position](&w)
	posVelMap := NewMap2[Position, Velocity](&w)

	cnt := 1
	posMap.NewBatchFn(n, func(entity Entity, pos *Position){
		pos.X = float64(cnt)
		cnt++
	})
	posVelMap.NewBatchFn(n, func(entity Entity, pos *Position, _ *Velocity){
		pos.X = float64(cnt)
		cnt++
	})
	expectEqual(t, 2*n+1, cnt)

	filter := NewFilter1[Position](&w)
	mapper.AddBatch(filter.Batch(), {{$mapArgs}})

	filter2 := NewFilter1[CompA](&w)
	query := filter2.Query()
	cnt = 0
	for query.Next() {
		pos := posMap.Get(query.Entity())
		expectGreater(t, pos.X, 0.0)
		cnt++
	}
	expectEqual(t, 2*n, cnt)

	mapper.RemoveBatch(filter2.Batch(), nil)
	
	query = filter2.Query()
	cnt = 0
	for query.Next() {
		cnt++
	}
	expectEqual(t, 0, cnt)
}

func TestMap{{.}}AddBatchFn(t *testing.T) {
	n := 12
	w := NewWorld(8)

	mapper := NewMap{{.}}{{$generics}}(&w)
	posMap := NewMap1[Position](&w)
	posVelMap := NewMap2[Position, Velocity](&w)

	cnt := 1
	posMap.NewBatchFn(n, func(entity Entity, pos *Position){
		pos.X = float64(cnt)
		cnt++
	})
	posVelMap.NewBatchFn(n, func(entity Entity, pos *Position, _ *Velocity){
		pos.X = float64(cnt)
		cnt++
	})
	expectEqual(t, 2*n+1, cnt)

	filter := NewFilter1[Position](&w)
	cnt = 0
	mapper.AddBatchFn(filter.Batch(), func(entity Entity, {{$args}}){
		a.X = float64(cnt)
		cnt++
	})

	filter2 := NewFilter1[CompA](&w)
	query := filter2.Query()
	cnt = 0
	for query.Next() {
		a := query.Get()
		expectEqual(t, float64(cnt), a.X)
		pos := posMap.Get(query.Entity())
		expectGreater(t, pos.X, 0.0)
		cnt++
	}
	expectEqual(t, 2*n, cnt)
	
	cnt = 0
	mapper.RemoveBatch(filter2.Batch(), func(entity Entity){
		cnt++
	})
	expectEqual(t, 2*n, cnt)
	
	query = filter2.Query()
	cnt = 0
	for query.Next() {
		cnt++
	}
	expectEqual(t, 0, cnt)
}

func TestMap{{.}}SetRelationsBatch(t *testing.T) {
	n := 24
	w := NewWorld(16)
	parent1 := w.NewEntity()
	parent2 := w.NewEntity()
	parent3 := w.NewEntity()

	mapper := NewMap{{.}}{{$genericsRel}}(&w)
	childMap := NewMap[ChildOf](&w)
	
	mapper.NewBatch(n, {{$mapArgsRel}}, RelIdx(0, parent1))
	mapper.NewBatch(n, {{$mapArgsRel}}, RelIdx(0, parent2))

	filter := NewFilter1[ChildOf](&w)

	mapper.SetRelationsBatch(filter.Batch(RelIdx(0, parent2)), func(entity Entity) {
		expectEqual(t, parent3, childMap.GetRelation(entity))
	}, RelIdx(0, parent3))

	query := filter.Query(RelIdx(0, parent2))
	cnt := 0
	for query.Next() {
		cnt++
	}
	expectEqual(t, 0, cnt)

	query = filter.Query(RelIdx(0, parent3))
	cnt = 0
	for query.Next() {
		cnt++
	}
	expectEqual(t, n, cnt)

	expectPanics(t, func(){
		mapper.SetRelationsBatch(filter.Batch(RelIdx(0, parent2)), func(entity Entity) {
			expectEqual(t, parent3, childMap.GetRelation(entity))
		})
	})
}
{{end -}}
{{end -}}

package ecs

// Code generated by go generate; DO NOT EDIT.

import "unsafe"

// Map1 is a mapper to access 1 components of an entity.
type Map1[A any] struct {
	world    *World
	ids      []ID
	storageA *componentStorage
}

// NewMap1 creates a new [Map1].
func NewMap1[A any](w *World) Map1[A] {
	ids := []ID{
		ComponentID[A](w),
	}
	return Map1[A]{
		world:    w,
		ids:      ids,
		storageA: &w.storage.components[ids[0].id],
	}
}

// Get returns the mapped components for the given entity.
func (m *Map1[A]) Get(entity Entity) *A {
	if !m.world.Alive(entity) {
		panic("can't get components of a dead entity")
	}
	index := m.world.entities[entity.id]
	row := uintptr(index.row)
	return (*A)(m.storageA.columns[index.table].Get(row))
}

// Add the mapped components to the given entity.
func (m *Map1[A]) Add(entity Entity, a *A) {
	if !m.world.Alive(entity) {
		panic("can't add components to a dead entity")
	}
	m.world.exchange(entity, m.ids, nil, []unsafe.Pointer{
		unsafe.Pointer(a),
	})
}

// Remove the mapped components from the given entity.
func (m *Map1[A]) Remove(entity Entity) {
	if !m.world.Alive(entity) {
		panic("can't remove components from a dead entity")
	}
	m.world.exchange(entity, nil, m.ids, nil)
}

// Map2 is a mapper to access 2 components of an entity.
type Map2[A any, B any] struct {
	world    *World
	ids      []ID
	storageA *componentStorage
	storageB *componentStorage
}

// NewMap2 creates a new [Map2].
func NewMap2[A any, B any](w *World) Map2[A, B] {
	ids := []ID{
		ComponentID[A](w),
		ComponentID[B](w),
	}
	return Map2[A, B]{
		world:    w,
		ids:      ids,
		storageA: &w.storage.components[ids[0].id],
		storageB: &w.storage.components[ids[1].id],
	}
}

// Get returns the mapped components for the given entity.
func (m *Map2[A, B]) Get(entity Entity) (*A, *B) {
	if !m.world.Alive(entity) {
		panic("can't get components of a dead entity")
	}
	index := m.world.entities[entity.id]
	row := uintptr(index.row)
	return (*A)(m.storageA.columns[index.table].Get(row)),
		(*B)(m.storageB.columns[index.table].Get(row))
}

// Add the mapped components to the given entity.
func (m *Map2[A, B]) Add(entity Entity, a *A, b *B) {
	if !m.world.Alive(entity) {
		panic("can't add components to a dead entity")
	}
	m.world.exchange(entity, m.ids, nil, []unsafe.Pointer{
		unsafe.Pointer(a),
		unsafe.Pointer(b),
	})
}

// Remove the mapped components from the given entity.
func (m *Map2[A, B]) Remove(entity Entity) {
	if !m.world.Alive(entity) {
		panic("can't remove components from a dead entity")
	}
	m.world.exchange(entity, nil, m.ids, nil)
}

// Map3 is a mapper to access 3 components of an entity.
type Map3[A any, B any, C any] struct {
	world    *World
	ids      []ID
	storageA *componentStorage
	storageB *componentStorage
	storageC *componentStorage
}

// NewMap3 creates a new [Map3].
func NewMap3[A any, B any, C any](w *World) Map3[A, B, C] {
	ids := []ID{
		ComponentID[A](w),
		ComponentID[B](w),
		ComponentID[C](w),
	}
	return Map3[A, B, C]{
		world:    w,
		ids:      ids,
		storageA: &w.storage.components[ids[0].id],
		storageB: &w.storage.components[ids[1].id],
		storageC: &w.storage.components[ids[2].id],
	}
}

// Get returns the mapped components for the given entity.
func (m *Map3[A, B, C]) Get(entity Entity) (*A, *B, *C) {
	if !m.world.Alive(entity) {
		panic("can't get components of a dead entity")
	}
	index := m.world.entities[entity.id]
	row := uintptr(index.row)
	return (*A)(m.storageA.columns[index.table].Get(row)),
		(*B)(m.storageB.columns[index.table].Get(row)),
		(*C)(m.storageC.columns[index.table].Get(row))
}

// Add the mapped components to the given entity.
func (m *Map3[A, B, C]) Add(entity Entity, a *A, b *B, c *C) {
	if !m.world.Alive(entity) {
		panic("can't add components to a dead entity")
	}
	m.world.exchange(entity, m.ids, nil, []unsafe.Pointer{
		unsafe.Pointer(a),
		unsafe.Pointer(b),
		unsafe.Pointer(c),
	})
}

// Remove the mapped components from the given entity.
func (m *Map3[A, B, C]) Remove(entity Entity) {
	if !m.world.Alive(entity) {
		panic("can't remove components from a dead entity")
	}
	m.world.exchange(entity, nil, m.ids, nil)
}

// Map4 is a mapper to access 4 components of an entity.
type Map4[A any, B any, C any, D any] struct {
	world    *World
	ids      []ID
	storageA *componentStorage
	storageB *componentStorage
	storageC *componentStorage
	storageD *componentStorage
}

// NewMap4 creates a new [Map4].
func NewMap4[A any, B any, C any, D any](w *World) Map4[A, B, C, D] {
	ids := []ID{
		ComponentID[A](w),
		ComponentID[B](w),
		ComponentID[C](w),
		ComponentID[D](w),
	}
	return Map4[A, B, C, D]{
		world:    w,
		ids:      ids,
		storageA: &w.storage.components[ids[0].id],
		storageB: &w.storage.components[ids[1].id],
		storageC: &w.storage.components[ids[2].id],
		storageD: &w.storage.components[ids[3].id],
	}
}

// Get returns the mapped components for the given entity.
func (m *Map4[A, B, C, D]) Get(entity Entity) (*A, *B, *C, *D) {
	if !m.world.Alive(entity) {
		panic("can't get components of a dead entity")
	}
	index := m.world.entities[entity.id]
	row := uintptr(index.row)
	return (*A)(m.storageA.columns[index.table].Get(row)),
		(*B)(m.storageB.columns[index.table].Get(row)),
		(*C)(m.storageC.columns[index.table].Get(row)),
		(*D)(m.storageD.columns[index.table].Get(row))
}

// Add the mapped components to the given entity.
func (m *Map4[A, B, C, D]) Add(entity Entity, a *A, b *B, c *C, d *D) {
	if !m.world.Alive(entity) {
		panic("can't add components to a dead entity")
	}
	m.world.exchange(entity, m.ids, nil, []unsafe.Pointer{
		unsafe.Pointer(a),
		unsafe.Pointer(b),
		unsafe.Pointer(c),
		unsafe.Pointer(d),
	})
}

// Remove the mapped components from the given entity.
func (m *Map4[A, B, C, D]) Remove(entity Entity) {
	if !m.world.Alive(entity) {
		panic("can't remove components from a dead entity")
	}
	m.world.exchange(entity, nil, m.ids, nil)
}

// Map5 is a mapper to access 5 components of an entity.
type Map5[A any, B any, C any, D any, E any] struct {
	world    *World
	ids      []ID
	storageA *componentStorage
	storageB *componentStorage
	storageC *componentStorage
	storageD *componentStorage
	storageE *componentStorage
}

// NewMap5 creates a new [Map5].
func NewMap5[A any, B any, C any, D any, E any](w *World) Map5[A, B, C, D, E] {
	ids := []ID{
		ComponentID[A](w),
		ComponentID[B](w),
		ComponentID[C](w),
		ComponentID[D](w),
		ComponentID[E](w),
	}
	return Map5[A, B, C, D, E]{
		world:    w,
		ids:      ids,
		storageA: &w.storage.components[ids[0].id],
		storageB: &w.storage.components[ids[1].id],
		storageC: &w.storage.components[ids[2].id],
		storageD: &w.storage.components[ids[3].id],
		storageE: &w.storage.components[ids[4].id],
	}
}

// Get returns the mapped components for the given entity.
func (m *Map5[A, B, C, D, E]) Get(entity Entity) (*A, *B, *C, *D, *E) {
	if !m.world.Alive(entity) {
		panic("can't get components of a dead entity")
	}
	index := m.world.entities[entity.id]
	row := uintptr(index.row)
	return (*A)(m.storageA.columns[index.table].Get(row)),
		(*B)(m.storageB.columns[index.table].Get(row)),
		(*C)(m.storageC.columns[index.table].Get(row)),
		(*D)(m.storageD.columns[index.table].Get(row)),
		(*E)(m.storageE.columns[index.table].Get(row))
}

// Add the mapped components to the given entity.
func (m *Map5[A, B, C, D, E]) Add(entity Entity, a *A, b *B, c *C, d *D, e *E) {
	if !m.world.Alive(entity) {
		panic("can't add components to a dead entity")
	}
	m.world.exchange(entity, m.ids, nil, []unsafe.Pointer{
		unsafe.Pointer(a),
		unsafe.Pointer(b),
		unsafe.Pointer(c),
		unsafe.Pointer(d),
		unsafe.Pointer(e),
	})
}

// Remove the mapped components from the given entity.
func (m *Map5[A, B, C, D, E]) Remove(entity Entity) {
	if !m.world.Alive(entity) {
		panic("can't remove components from a dead entity")
	}
	m.world.exchange(entity, nil, m.ids, nil)
}

// Map6 is a mapper to access 6 components of an entity.
type Map6[A any, B any, C any, D any, E any, F any] struct {
	world    *World
	ids      []ID
	storageA *componentStorage
	storageB *componentStorage
	storageC *componentStorage
	storageD *componentStorage
	storageE *componentStorage
	storageF *componentStorage
}

// NewMap6 creates a new [Map6].
func NewMap6[A any, B any, C any, D any, E any, F any](w *World) Map6[A, B, C, D, E, F] {
	ids := []ID{
		ComponentID[A](w),
		ComponentID[B](w),
		ComponentID[C](w),
		ComponentID[D](w),
		ComponentID[E](w),
		ComponentID[F](w),
	}
	return Map6[A, B, C, D, E, F]{
		world:    w,
		ids:      ids,
		storageA: &w.storage.components[ids[0].id],
		storageB: &w.storage.components[ids[1].id],
		storageC: &w.storage.components[ids[2].id],
		storageD: &w.storage.components[ids[3].id],
		storageE: &w.storage.components[ids[4].id],
		storageF: &w.storage.components[ids[5].id],
	}
}

// Get returns the mapped components for the given entity.
func (m *Map6[A, B, C, D, E, F]) Get(entity Entity) (*A, *B, *C, *D, *E, *F) {
	if !m.world.Alive(entity) {
		panic("can't get components of a dead entity")
	}
	index := m.world.entities[entity.id]
	row := uintptr(index.row)
	return (*A)(m.storageA.columns[index.table].Get(row)),
		(*B)(m.storageB.columns[index.table].Get(row)),
		(*C)(m.storageC.columns[index.table].Get(row)),
		(*D)(m.storageD.columns[index.table].Get(row)),
		(*E)(m.storageE.columns[index.table].Get(row)),
		(*F)(m.storageF.columns[index.table].Get(row))
}

// Add the mapped components to the given entity.
func (m *Map6[A, B, C, D, E, F]) Add(entity Entity, a *A, b *B, c *C, d *D, e *E, f *F) {
	if !m.world.Alive(entity) {
		panic("can't add components to a dead entity")
	}
	m.world.exchange(entity, m.ids, nil, []unsafe.Pointer{
		unsafe.Pointer(a),
		unsafe.Pointer(b),
		unsafe.Pointer(c),
		unsafe.Pointer(d),
		unsafe.Pointer(e),
		unsafe.Pointer(f),
	})
}

// Remove the mapped components from the given entity.
func (m *Map6[A, B, C, D, E, F]) Remove(entity Entity) {
	if !m.world.Alive(entity) {
		panic("can't remove components from a dead entity")
	}
	m.world.exchange(entity, nil, m.ids, nil)
}

// Map7 is a mapper to access 7 components of an entity.
type Map7[A any, B any, C any, D any, E any, F any, G any] struct {
	world    *World
	ids      []ID
	storageA *componentStorage
	storageB *componentStorage
	storageC *componentStorage
	storageD *componentStorage
	storageE *componentStorage
	storageF *componentStorage
	storageG *componentStorage
}

// NewMap7 creates a new [Map7].
func NewMap7[A any, B any, C any, D any, E any, F any, G any](w *World) Map7[A, B, C, D, E, F, G] {
	ids := []ID{
		ComponentID[A](w),
		ComponentID[B](w),
		ComponentID[C](w),
		ComponentID[D](w),
		ComponentID[E](w),
		ComponentID[F](w),
		ComponentID[G](w),
	}
	return Map7[A, B, C, D, E, F, G]{
		world:    w,
		ids:      ids,
		storageA: &w.storage.components[ids[0].id],
		storageB: &w.storage.components[ids[1].id],
		storageC: &w.storage.components[ids[2].id],
		storageD: &w.storage.components[ids[3].id],
		storageE: &w.storage.components[ids[4].id],
		storageF: &w.storage.components[ids[5].id],
		storageG: &w.storage.components[ids[6].id],
	}
}

// Get returns the mapped components for the given entity.
func (m *Map7[A, B, C, D, E, F, G]) Get(entity Entity) (*A, *B, *C, *D, *E, *F, *G) {
	if !m.world.Alive(entity) {
		panic("can't get components of a dead entity")
	}
	index := m.world.entities[entity.id]
	row := uintptr(index.row)
	return (*A)(m.storageA.columns[index.table].Get(row)),
		(*B)(m.storageB.columns[index.table].Get(row)),
		(*C)(m.storageC.columns[index.table].Get(row)),
		(*D)(m.storageD.columns[index.table].Get(row)),
		(*E)(m.storageE.columns[index.table].Get(row)),
		(*F)(m.storageF.columns[index.table].Get(row)),
		(*G)(m.storageG.columns[index.table].Get(row))
}

// Add the mapped components to the given entity.
func (m *Map7[A, B, C, D, E, F, G]) Add(entity Entity, a *A, b *B, c *C, d *D, e *E, f *F, g *G) {
	if !m.world.Alive(entity) {
		panic("can't add components to a dead entity")
	}
	m.world.exchange(entity, m.ids, nil, []unsafe.Pointer{
		unsafe.Pointer(a),
		unsafe.Pointer(b),
		unsafe.Pointer(c),
		unsafe.Pointer(d),
		unsafe.Pointer(e),
		unsafe.Pointer(f),
		unsafe.Pointer(g),
	})
}

// Remove the mapped components from the given entity.
func (m *Map7[A, B, C, D, E, F, G]) Remove(entity Entity) {
	if !m.world.Alive(entity) {
		panic("can't remove components from a dead entity")
	}
	m.world.exchange(entity, nil, m.ids, nil)
}

// Map8 is a mapper to access 8 components of an entity.
type Map8[A any, B any, C any, D any, E any, F any, G any, H any] struct {
	world    *World
	ids      []ID
	storageA *componentStorage
	storageB *componentStorage
	storageC *componentStorage
	storageD *componentStorage
	storageE *componentStorage
	storageF *componentStorage
	storageG *componentStorage
	storageH *componentStorage
}

// NewMap8 creates a new [Map8].
func NewMap8[A any, B any, C any, D any, E any, F any, G any, H any](w *World) Map8[A, B, C, D, E, F, G, H] {
	ids := []ID{
		ComponentID[A](w),
		ComponentID[B](w),
		ComponentID[C](w),
		ComponentID[D](w),
		ComponentID[E](w),
		ComponentID[F](w),
		ComponentID[G](w),
		ComponentID[H](w),
	}
	return Map8[A, B, C, D, E, F, G, H]{
		world:    w,
		ids:      ids,
		storageA: &w.storage.components[ids[0].id],
		storageB: &w.storage.components[ids[1].id],
		storageC: &w.storage.components[ids[2].id],
		storageD: &w.storage.components[ids[3].id],
		storageE: &w.storage.components[ids[4].id],
		storageF: &w.storage.components[ids[5].id],
		storageG: &w.storage.components[ids[6].id],
		storageH: &w.storage.components[ids[7].id],
	}
}

// Get returns the mapped components for the given entity.
func (m *Map8[A, B, C, D, E, F, G, H]) Get(entity Entity) (*A, *B, *C, *D, *E, *F, *G, *H) {
	if !m.world.Alive(entity) {
		panic("can't get components of a dead entity")
	}
	index := m.world.entities[entity.id]
	row := uintptr(index.row)
	return (*A)(m.storageA.columns[index.table].Get(row)),
		(*B)(m.storageB.columns[index.table].Get(row)),
		(*C)(m.storageC.columns[index.table].Get(row)),
		(*D)(m.storageD.columns[index.table].Get(row)),
		(*E)(m.storageE.columns[index.table].Get(row)),
		(*F)(m.storageF.columns[index.table].Get(row)),
		(*G)(m.storageG.columns[index.table].Get(row)),
		(*H)(m.storageH.columns[index.table].Get(row))
}

// Add the mapped components to the given entity.
func (m *Map8[A, B, C, D, E, F, G, H]) Add(entity Entity, a *A, b *B, c *C, d *D, e *E, f *F, g *G, h *H) {
	if !m.world.Alive(entity) {
		panic("can't add components to a dead entity")
	}
	m.world.exchange(entity, m.ids, nil, []unsafe.Pointer{
		unsafe.Pointer(a),
		unsafe.Pointer(b),
		unsafe.Pointer(c),
		unsafe.Pointer(d),
		unsafe.Pointer(e),
		unsafe.Pointer(f),
		unsafe.Pointer(g),
		unsafe.Pointer(h),
	})
}

// Remove the mapped components from the given entity.
func (m *Map8[A, B, C, D, E, F, G, H]) Remove(entity Entity) {
	if !m.world.Alive(entity) {
		panic("can't remove components from a dead entity")
	}
	m.world.exchange(entity, nil, m.ids, nil)
}

package ecs

// Code generated by go generate; DO NOT EDIT.

import "testing"

func TestObserve1(t *testing.T) {
	w := NewWorld()
	obs := Observe1[CompA](OnAddComponents).Do(func(e Entity, a *CompA) {}).Register(&w)

	expectPanicsWithValue(t, "can't modify a registered observer",
		func() {
			obs.For(C[Position]())
		})
	expectPanicsWithValue(t, "can't modify a registered observer",
		func() {
			obs.With(C[Position]())
		})
	expectPanicsWithValue(t, "can't modify a registered observer",
		func() {
			obs.Without(C[Position]())
		})
	expectPanicsWithValue(t, "can't modify a registered observer",
		func() {
			obs.Exclusive()
		})

	expectPanicsWithValue(t, "observer callback must be set via Do before registering",
		func() {
			Observe1[CompA](OnCreateEntity).Register(&w)
		})
	expectPanicsWithValue(t, "observer already has a callback",
		func() {
			Observe1[CompA](OnCreateEntity).
				Do(func(e Entity, a *CompA) {}).
				Do(func(e Entity, a *CompA) {})
		})

	obs = Observe1[CompA](OnAddComponents).Do(func(e Entity, a *CompA) {})

	obs = obs.For()
	expectEqual(t, 0, len(obs.observer.comps))
	expectFalse(t, obs.observer.hasComps)

	obs = obs.For(C[Position]())
	expectEqual(t, 1, len(obs.observer.comps))
	expectTrue(t, obs.observer.hasComps)

	obs = obs.With()
	expectEqual(t, 0, len(obs.observer.with))
	expectFalse(t, obs.observer.hasWith)

	obs = obs.With(C[Position]())
	expectEqual(t, 1, len(obs.observer.with))
	expectTrue(t, obs.observer.hasWith)

	obs = obs.Without()
	expectEqual(t, 0, len(obs.observer.without))
	expectFalse(t, obs.observer.hasWithout)

	obs = obs.Without(C[Position]())
	expectEqual(t, 1, len(obs.observer.without))
	expectTrue(t, obs.observer.hasWithout)
}

func TestObserver1Register(t *testing.T) {
	w := NewWorld()

	obs1 := Observe1[CompA](OnCreateEntity).
		With(C[Position]()).
		Without(C[Heading]()).
		Do(func(e Entity, a *CompA) {}).
		Register(&w)
	expectTrue(t, w.storage.observers.HasObservers(OnCreateEntity))

	obs2 := Observe1[CompA](OnCreateEntity).
		With(C[Position]()).
		Do(func(e Entity, a *CompA) {}).
		Register(&w)

	expectPanicsWithValue(t, "observer is already registered",
		func() {
			obs1.Register(&w)
		})

	obs1.Unregister(&w)
	expectTrue(t, w.storage.observers.HasObservers(OnCreateEntity))
	obs2.Unregister(&w)
	expectFalse(t, w.storage.observers.HasObservers(OnCreateEntity))
}

func TestObserver1Callback(t *testing.T) {
	w := NewWorld()
	builder := NewMap1[CompA](&w)

	Observe1[CompA](OnCreateEntity).
		Do(func(e Entity, a *CompA) {
			expectEqual(t, CompA{}, *a)
		}).
		Register(&w)

	builder.NewEntity(
		&CompA{},
	)
}

func TestObserve2(t *testing.T) {
	w := NewWorld()
	obs := Observe2[CompA, CompB](OnAddComponents).Do(func(e Entity, a *CompA, b *CompB) {}).Register(&w)

	expectPanicsWithValue(t, "can't modify a registered observer",
		func() {
			obs.For(C[Position]())
		})
	expectPanicsWithValue(t, "can't modify a registered observer",
		func() {
			obs.With(C[Position]())
		})
	expectPanicsWithValue(t, "can't modify a registered observer",
		func() {
			obs.Without(C[Position]())
		})
	expectPanicsWithValue(t, "can't modify a registered observer",
		func() {
			obs.Exclusive()
		})

	expectPanicsWithValue(t, "observer callback must be set via Do before registering",
		func() {
			Observe2[CompA, CompB](OnCreateEntity).Register(&w)
		})
	expectPanicsWithValue(t, "observer already has a callback",
		func() {
			Observe2[CompA, CompB](OnCreateEntity).
				Do(func(e Entity, a *CompA, b *CompB) {}).
				Do(func(e Entity, a *CompA, b *CompB) {})
		})

	obs = Observe2[CompA, CompB](OnAddComponents).Do(func(e Entity, a *CompA, b *CompB) {})

	obs = obs.For()
	expectEqual(t, 0, len(obs.observer.comps))
	expectFalse(t, obs.observer.hasComps)

	obs = obs.For(C[Position]())
	expectEqual(t, 1, len(obs.observer.comps))
	expectTrue(t, obs.observer.hasComps)

	obs = obs.With()
	expectEqual(t, 0, len(obs.observer.with))
	expectFalse(t, obs.observer.hasWith)

	obs = obs.With(C[Position]())
	expectEqual(t, 1, len(obs.observer.with))
	expectTrue(t, obs.observer.hasWith)

	obs = obs.Without()
	expectEqual(t, 0, len(obs.observer.without))
	expectFalse(t, obs.observer.hasWithout)

	obs = obs.Without(C[Position]())
	expectEqual(t, 1, len(obs.observer.without))
	expectTrue(t, obs.observer.hasWithout)
}

func TestObserver2Register(t *testing.T) {
	w := NewWorld()

	obs1 := Observe2[CompA, CompB](OnCreateEntity).
		With(C[Position]()).
		Without(C[Heading]()).
		Do(func(e Entity, a *CompA, b *CompB) {}).
		Register(&w)
	expectTrue(t, w.storage.observers.HasObservers(OnCreateEntity))

	obs2 := Observe2[CompA, CompB](OnCreateEntity).
		With(C[Position]()).
		Do(func(e Entity, a *CompA, b *CompB) {}).
		Register(&w)

	expectPanicsWithValue(t, "observer is already registered",
		func() {
			obs1.Register(&w)
		})

	obs1.Unregister(&w)
	expectTrue(t, w.storage.observers.HasObservers(OnCreateEntity))
	obs2.Unregister(&w)
	expectFalse(t, w.storage.observers.HasObservers(OnCreateEntity))
}

func TestObserver2Callback(t *testing.T) {
	w := NewWorld()
	builder := NewMap2[CompA, CompB](&w)

	Observe2[CompA, CompB](OnCreateEntity).
		Do(func(e Entity, a *CompA, b *CompB) {
			expectEqual(t, CompA{}, *a)
		}).
		Register(&w)

	builder.NewEntity(
		&CompA{},
		&CompB{},
	)
}

func TestObserve3(t *testing.T) {
	w := NewWorld()
	obs := Observe3[CompA, CompB, CompC](OnAddComponents).Do(func(e Entity, a *CompA, b *CompB, c *CompC) {}).Register(&w)

	expectPanicsWithValue(t, "can't modify a registered observer",
		func() {
			obs.For(C[Position]())
		})
	expectPanicsWithValue(t, "can't modify a registered observer",
		func() {
			obs.With(C[Position]())
		})
	expectPanicsWithValue(t, "can't modify a registered observer",
		func() {
			obs.Without(C[Position]())
		})
	expectPanicsWithValue(t, "can't modify a registered observer",
		func() {
			obs.Exclusive()
		})

	expectPanicsWithValue(t, "observer callback must be set via Do before registering",
		func() {
			Observe3[CompA, CompB, CompC](OnCreateEntity).Register(&w)
		})
	expectPanicsWithValue(t, "observer already has a callback",
		func() {
			Observe3[CompA, CompB, CompC](OnCreateEntity).
				Do(func(e Entity, a *CompA, b *CompB, c *CompC) {}).
				Do(func(e Entity, a *CompA, b *CompB, c *CompC) {})
		})

	obs = Observe3[CompA, CompB, CompC](OnAddComponents).Do(func(e Entity, a *CompA, b *CompB, c *CompC) {})

	obs = obs.For()
	expectEqual(t, 0, len(obs.observer.comps))
	expectFalse(t, obs.observer.hasComps)

	obs = obs.For(C[Position]())
	expectEqual(t, 1, len(obs.observer.comps))
	expectTrue(t, obs.observer.hasComps)

	obs = obs.With()
	expectEqual(t, 0, len(obs.observer.with))
	expectFalse(t, obs.observer.hasWith)

	obs = obs.With(C[Position]())
	expectEqual(t, 1, len(obs.observer.with))
	expectTrue(t, obs.observer.hasWith)

	obs = obs.Without()
	expectEqual(t, 0, len(obs.observer.without))
	expectFalse(t, obs.observer.hasWithout)

	obs = obs.Without(C[Position]())
	expectEqual(t, 1, len(obs.observer.without))
	expectTrue(t, obs.observer.hasWithout)
}

func TestObserver3Register(t *testing.T) {
	w := NewWorld()

	obs1 := Observe3[CompA, CompB, CompC](OnCreateEntity).
		With(C[Position]()).
		Without(C[Heading]()).
		Do(func(e Entity, a *CompA, b *CompB, c *CompC) {}).
		Register(&w)
	expectTrue(t, w.storage.observers.HasObservers(OnCreateEntity))

	obs2 := Observe3[CompA, CompB, CompC](OnCreateEntity).
		With(C[Position]()).
		Do(func(e Entity, a *CompA, b *CompB, c *CompC) {}).
		Register(&w)

	expectPanicsWithValue(t, "observer is already registered",
		func() {
			obs1.Register(&w)
		})

	obs1.Unregister(&w)
	expectTrue(t, w.storage.observers.HasObservers(OnCreateEntity))
	obs2.Unregister(&w)
	expectFalse(t, w.storage.observers.HasObservers(OnCreateEntity))
}

func TestObserver3Callback(t *testing.T) {
	w := NewWorld()
	builder := NewMap3[CompA, CompB, CompC](&w)

	Observe3[CompA, CompB, CompC](OnCreateEntity).
		Do(func(e Entity, a *CompA, b *CompB, c *CompC) {
			expectEqual(t, CompA{}, *a)
		}).
		Register(&w)

	builder.NewEntity(
		&CompA{},
		&CompB{},
		&CompC{},
	)
}

func TestObserve4(t *testing.T) {
	w := NewWorld()
	obs := Observe4[CompA, CompB, CompC, CompD](OnAddComponents).Do(func(e Entity, a *CompA, b *CompB, c *CompC, d *CompD) {}).Register(&w)

	expectPanicsWithValue(t, "can't modify a registered observer",
		func() {
			obs.For(C[Position]())
		})
	expectPanicsWithValue(t, "can't modify a registered observer",
		func() {
			obs.With(C[Position]())
		})
	expectPanicsWithValue(t, "can't modify a registered observer",
		func() {
			obs.Without(C[Position]())
		})
	expectPanicsWithValue(t, "can't modify a registered observer",
		func() {
			obs.Exclusive()
		})

	expectPanicsWithValue(t, "observer callback must be set via Do before registering",
		func() {
			Observe4[CompA, CompB, CompC, CompD](OnCreateEntity).Register(&w)
		})
	expectPanicsWithValue(t, "observer already has a callback",
		func() {
			Observe4[CompA, CompB, CompC, CompD](OnCreateEntity).
				Do(func(e Entity, a *CompA, b *CompB, c *CompC, d *CompD) {}).
				Do(func(e Entity, a *CompA, b *CompB, c *CompC, d *CompD) {})
		})

	obs = Observe4[CompA, CompB, CompC, CompD](OnAddComponents).Do(func(e Entity, a *CompA, b *CompB, c *CompC, d *CompD) {})

	obs = obs.For()
	expectEqual(t, 0, len(obs.observer.comps))
	expectFalse(t, obs.observer.hasComps)

	obs = obs.For(C[Position]())
	expectEqual(t, 1, len(obs.observer.comps))
	expectTrue(t, obs.observer.hasComps)

	obs = obs.With()
	expectEqual(t, 0, len(obs.observer.with))
	expectFalse(t, obs.observer.hasWith)

	obs = obs.With(C[Position]())
	expectEqual(t, 1, len(obs.observer.with))
	expectTrue(t, obs.observer.hasWith)

	obs = obs.Without()
	expectEqual(t, 0, len(obs.observer.without))
	expectFalse(t, obs.observer.hasWithout)

	obs = obs.Without(C[Position]())
	expectEqual(t, 1, len(obs.observer.without))
	expectTrue(t, obs.observer.hasWithout)
}

func TestObserver4Register(t *testing.T) {
	w := NewWorld()

	obs1 := Observe4[CompA, CompB, CompC, CompD](OnCreateEntity).
		With(C[Position]()).
		Without(C[Heading]()).
		Do(func(e Entity, a *CompA, b *CompB, c *CompC, d *CompD) {}).
		Register(&w)
	expectTrue(t, w.storage.observers.HasObservers(OnCreateEntity))

	obs2 := Observe4[CompA, CompB, CompC, CompD](OnCreateEntity).
		With(C[Position]()).
		Do(func(e Entity, a *CompA, b *CompB, c *CompC, d *CompD) {}).
		Register(&w)

	expectPanicsWithValue(t, "observer is already registered",
		func() {
			obs1.Register(&w)
		})

	obs1.Unregister(&w)
	expectTrue(t, w.storage.observers.HasObservers(OnCreateEntity))
	obs2.Unregister(&w)
	expectFalse(t, w.storage.observers.HasObservers(OnCreateEntity))
}

func TestObserver4Callback(t *testing.T) {
	w := NewWorld()
	builder := NewMap4[CompA, CompB, CompC, CompD](&w)

	Observe4[CompA, CompB, CompC, CompD](OnCreateEntity).
		Do(func(e Entity, a *CompA, b *CompB, c *CompC, d *CompD) {
			expectEqual(t, CompA{}, *a)
		}).
		Register(&w)

	builder.NewEntity(
		&CompA{},
		&CompB{},
		&CompC{},
		&CompD{},
	)
}

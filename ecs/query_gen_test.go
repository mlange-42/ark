package ecs

// Code generated by go generate; DO NOT EDIT.

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestQuery1(t *testing.T) {
	n := 10
	w := NewWorld(4)

	mapper := NewMap1[CompA](&w)
	compMapper := NewMap[CompA](&w)
	posMapper := NewMap[Position](&w)

	for range n {
		_ = mapper.NewEntity(&CompA{})

		e := mapper.NewEntity(&CompA{})
		compMapper.Remove(e)

		e = mapper.NewEntity(&CompA{})
		posMapper.Add(e, &Position{})
	}

	// normal filter
	filter := NewFilter1[CompA](&w)
	query := filter.Query()

	cnt := 0
	for query.Next() {
		_ = query.Entity()
		_ = query.Get()
		cnt++
	}
	assert.Equal(t, cnt, 2*n)

	// filter without
	filter = NewFilter1[CompA](&w).Without(C[Position]())
	query = filter.Query()

	cnt = 0
	for query.Next() {
		_ = query.Entity()
		_ = query.Get()
		cnt++
	}
	assert.Equal(t, cnt, n)

	// filter exclusive
	filter = NewFilter1[CompA](&w).Exclusive()
	query = filter.Query()

	cnt = 0
	for query.Next() {
		_ = query.Entity()
		_ = query.Get()
		cnt++
	}
	assert.Equal(t, cnt, n)
}

func TestQuery1Empty(t *testing.T) {
	w := NewWorld(4)

	posMap := NewMap[Position](&w)

	for range 10 {
		e1 := w.NewEntity()
		posMap.Add(e1, &Position{})
	}

	filter := NewFilter1[CompA](&w)
	query := filter.Query()

	assert.Panics(t, func() { query.Get() })
	assert.Panics(t, func() { query.Entity() })

	cnt := 0
	for query.Next() {
		cnt++
	}
	assert.Equal(t, 0, cnt)

	assert.Panics(t, func() { query.Get() })
	assert.Panics(t, func() { query.Entity() })
	assert.Panics(t, func() { query.Next() })
}

func TestQuery1Relations(t *testing.T) {

}
func TestQuery2(t *testing.T) {
	n := 10
	w := NewWorld(4)

	mapper := NewMap2[CompA, CompB](&w)
	compMapper := NewMap[CompA](&w)
	posMapper := NewMap[Position](&w)

	for range n {
		_ = mapper.NewEntity(&CompA{}, &CompB{})

		e := mapper.NewEntity(&CompA{}, &CompB{})
		compMapper.Remove(e)

		e = mapper.NewEntity(&CompA{}, &CompB{})
		posMapper.Add(e, &Position{})
	}

	// normal filter
	filter := NewFilter2[CompA, CompB](&w)
	query := filter.Query()

	cnt := 0
	for query.Next() {
		_ = query.Entity()
		_, _ = query.Get()
		cnt++
	}
	assert.Equal(t, cnt, 2*n)

	// filter without
	filter = NewFilter2[CompA, CompB](&w).Without(C[Position]())
	query = filter.Query()

	cnt = 0
	for query.Next() {
		_ = query.Entity()
		_, _ = query.Get()
		cnt++
	}
	assert.Equal(t, cnt, n)

	// filter exclusive
	filter = NewFilter2[CompA, CompB](&w).Exclusive()
	query = filter.Query()

	cnt = 0
	for query.Next() {
		_ = query.Entity()
		_, _ = query.Get()
		cnt++
	}
	assert.Equal(t, cnt, n)
}

func TestQuery2Empty(t *testing.T) {
	w := NewWorld(4)

	posMap := NewMap[Position](&w)

	for range 10 {
		e1 := w.NewEntity()
		posMap.Add(e1, &Position{})
	}

	filter := NewFilter2[CompA, CompB](&w)
	query := filter.Query()

	assert.Panics(t, func() { query.Get() })
	assert.Panics(t, func() { query.Entity() })

	cnt := 0
	for query.Next() {
		cnt++
	}
	assert.Equal(t, 0, cnt)

	assert.Panics(t, func() { query.Get() })
	assert.Panics(t, func() { query.Entity() })
	assert.Panics(t, func() { query.Next() })
}

func TestQuery2Relations(t *testing.T) {

}
func TestQuery3(t *testing.T) {
	n := 10
	w := NewWorld(4)

	mapper := NewMap3[CompA, CompB, CompC](&w)
	compMapper := NewMap[CompA](&w)
	posMapper := NewMap[Position](&w)

	for range n {
		_ = mapper.NewEntity(&CompA{}, &CompB{}, &CompC{})

		e := mapper.NewEntity(&CompA{}, &CompB{}, &CompC{})
		compMapper.Remove(e)

		e = mapper.NewEntity(&CompA{}, &CompB{}, &CompC{})
		posMapper.Add(e, &Position{})
	}

	// normal filter
	filter := NewFilter3[CompA, CompB, CompC](&w)
	query := filter.Query()

	cnt := 0
	for query.Next() {
		_ = query.Entity()
		_, _, _ = query.Get()
		cnt++
	}
	assert.Equal(t, cnt, 2*n)

	// filter without
	filter = NewFilter3[CompA, CompB, CompC](&w).Without(C[Position]())
	query = filter.Query()

	cnt = 0
	for query.Next() {
		_ = query.Entity()
		_, _, _ = query.Get()
		cnt++
	}
	assert.Equal(t, cnt, n)

	// filter exclusive
	filter = NewFilter3[CompA, CompB, CompC](&w).Exclusive()
	query = filter.Query()

	cnt = 0
	for query.Next() {
		_ = query.Entity()
		_, _, _ = query.Get()
		cnt++
	}
	assert.Equal(t, cnt, n)
}

func TestQuery3Empty(t *testing.T) {
	w := NewWorld(4)

	posMap := NewMap[Position](&w)

	for range 10 {
		e1 := w.NewEntity()
		posMap.Add(e1, &Position{})
	}

	filter := NewFilter3[CompA, CompB, CompC](&w)
	query := filter.Query()

	assert.Panics(t, func() { query.Get() })
	assert.Panics(t, func() { query.Entity() })

	cnt := 0
	for query.Next() {
		cnt++
	}
	assert.Equal(t, 0, cnt)

	assert.Panics(t, func() { query.Get() })
	assert.Panics(t, func() { query.Entity() })
	assert.Panics(t, func() { query.Next() })
}

func TestQuery3Relations(t *testing.T) {

}
func TestQuery4(t *testing.T) {
	n := 10
	w := NewWorld(4)

	mapper := NewMap4[CompA, CompB, CompC, CompD](&w)
	compMapper := NewMap[CompA](&w)
	posMapper := NewMap[Position](&w)

	for range n {
		_ = mapper.NewEntity(&CompA{}, &CompB{}, &CompC{}, &CompD{})

		e := mapper.NewEntity(&CompA{}, &CompB{}, &CompC{}, &CompD{})
		compMapper.Remove(e)

		e = mapper.NewEntity(&CompA{}, &CompB{}, &CompC{}, &CompD{})
		posMapper.Add(e, &Position{})
	}

	// normal filter
	filter := NewFilter4[CompA, CompB, CompC, CompD](&w)
	query := filter.Query()

	cnt := 0
	for query.Next() {
		_ = query.Entity()
		_, _, _, _ = query.Get()
		cnt++
	}
	assert.Equal(t, cnt, 2*n)

	// filter without
	filter = NewFilter4[CompA, CompB, CompC, CompD](&w).Without(C[Position]())
	query = filter.Query()

	cnt = 0
	for query.Next() {
		_ = query.Entity()
		_, _, _, _ = query.Get()
		cnt++
	}
	assert.Equal(t, cnt, n)

	// filter exclusive
	filter = NewFilter4[CompA, CompB, CompC, CompD](&w).Exclusive()
	query = filter.Query()

	cnt = 0
	for query.Next() {
		_ = query.Entity()
		_, _, _, _ = query.Get()
		cnt++
	}
	assert.Equal(t, cnt, n)
}

func TestQuery4Empty(t *testing.T) {
	w := NewWorld(4)

	posMap := NewMap[Position](&w)

	for range 10 {
		e1 := w.NewEntity()
		posMap.Add(e1, &Position{})
	}

	filter := NewFilter4[CompA, CompB, CompC, CompD](&w)
	query := filter.Query()

	assert.Panics(t, func() { query.Get() })
	assert.Panics(t, func() { query.Entity() })

	cnt := 0
	for query.Next() {
		cnt++
	}
	assert.Equal(t, 0, cnt)

	assert.Panics(t, func() { query.Get() })
	assert.Panics(t, func() { query.Entity() })
	assert.Panics(t, func() { query.Next() })
}

func TestQuery4Relations(t *testing.T) {

}
func TestQuery5(t *testing.T) {
	n := 10
	w := NewWorld(4)

	mapper := NewMap5[CompA, CompB, CompC, CompD, CompE](&w)
	compMapper := NewMap[CompA](&w)
	posMapper := NewMap[Position](&w)

	for range n {
		_ = mapper.NewEntity(&CompA{}, &CompB{}, &CompC{}, &CompD{}, &CompE{})

		e := mapper.NewEntity(&CompA{}, &CompB{}, &CompC{}, &CompD{}, &CompE{})
		compMapper.Remove(e)

		e = mapper.NewEntity(&CompA{}, &CompB{}, &CompC{}, &CompD{}, &CompE{})
		posMapper.Add(e, &Position{})
	}

	// normal filter
	filter := NewFilter5[CompA, CompB, CompC, CompD, CompE](&w)
	query := filter.Query()

	cnt := 0
	for query.Next() {
		_ = query.Entity()
		_, _, _, _, _ = query.Get()
		cnt++
	}
	assert.Equal(t, cnt, 2*n)

	// filter without
	filter = NewFilter5[CompA, CompB, CompC, CompD, CompE](&w).Without(C[Position]())
	query = filter.Query()

	cnt = 0
	for query.Next() {
		_ = query.Entity()
		_, _, _, _, _ = query.Get()
		cnt++
	}
	assert.Equal(t, cnt, n)

	// filter exclusive
	filter = NewFilter5[CompA, CompB, CompC, CompD, CompE](&w).Exclusive()
	query = filter.Query()

	cnt = 0
	for query.Next() {
		_ = query.Entity()
		_, _, _, _, _ = query.Get()
		cnt++
	}
	assert.Equal(t, cnt, n)
}

func TestQuery5Empty(t *testing.T) {
	w := NewWorld(4)

	posMap := NewMap[Position](&w)

	for range 10 {
		e1 := w.NewEntity()
		posMap.Add(e1, &Position{})
	}

	filter := NewFilter5[CompA, CompB, CompC, CompD, CompE](&w)
	query := filter.Query()

	assert.Panics(t, func() { query.Get() })
	assert.Panics(t, func() { query.Entity() })

	cnt := 0
	for query.Next() {
		cnt++
	}
	assert.Equal(t, 0, cnt)

	assert.Panics(t, func() { query.Get() })
	assert.Panics(t, func() { query.Entity() })
	assert.Panics(t, func() { query.Next() })
}

func TestQuery5Relations(t *testing.T) {

}
func TestQuery6(t *testing.T) {
	n := 10
	w := NewWorld(4)

	mapper := NewMap6[CompA, CompB, CompC, CompD, CompE, CompF](&w)
	compMapper := NewMap[CompA](&w)
	posMapper := NewMap[Position](&w)

	for range n {
		_ = mapper.NewEntity(&CompA{}, &CompB{}, &CompC{}, &CompD{}, &CompE{}, &CompF{})

		e := mapper.NewEntity(&CompA{}, &CompB{}, &CompC{}, &CompD{}, &CompE{}, &CompF{})
		compMapper.Remove(e)

		e = mapper.NewEntity(&CompA{}, &CompB{}, &CompC{}, &CompD{}, &CompE{}, &CompF{})
		posMapper.Add(e, &Position{})
	}

	// normal filter
	filter := NewFilter6[CompA, CompB, CompC, CompD, CompE, CompF](&w)
	query := filter.Query()

	cnt := 0
	for query.Next() {
		_ = query.Entity()
		_, _, _, _, _, _ = query.Get()
		cnt++
	}
	assert.Equal(t, cnt, 2*n)

	// filter without
	filter = NewFilter6[CompA, CompB, CompC, CompD, CompE, CompF](&w).Without(C[Position]())
	query = filter.Query()

	cnt = 0
	for query.Next() {
		_ = query.Entity()
		_, _, _, _, _, _ = query.Get()
		cnt++
	}
	assert.Equal(t, cnt, n)

	// filter exclusive
	filter = NewFilter6[CompA, CompB, CompC, CompD, CompE, CompF](&w).Exclusive()
	query = filter.Query()

	cnt = 0
	for query.Next() {
		_ = query.Entity()
		_, _, _, _, _, _ = query.Get()
		cnt++
	}
	assert.Equal(t, cnt, n)
}

func TestQuery6Empty(t *testing.T) {
	w := NewWorld(4)

	posMap := NewMap[Position](&w)

	for range 10 {
		e1 := w.NewEntity()
		posMap.Add(e1, &Position{})
	}

	filter := NewFilter6[CompA, CompB, CompC, CompD, CompE, CompF](&w)
	query := filter.Query()

	assert.Panics(t, func() { query.Get() })
	assert.Panics(t, func() { query.Entity() })

	cnt := 0
	for query.Next() {
		cnt++
	}
	assert.Equal(t, 0, cnt)

	assert.Panics(t, func() { query.Get() })
	assert.Panics(t, func() { query.Entity() })
	assert.Panics(t, func() { query.Next() })
}

func TestQuery6Relations(t *testing.T) {

}
func TestQuery7(t *testing.T) {
	n := 10
	w := NewWorld(4)

	mapper := NewMap7[CompA, CompB, CompC, CompD, CompE, CompF, CompG](&w)
	compMapper := NewMap[CompA](&w)
	posMapper := NewMap[Position](&w)

	for range n {
		_ = mapper.NewEntity(&CompA{}, &CompB{}, &CompC{}, &CompD{}, &CompE{}, &CompF{}, &CompG{})

		e := mapper.NewEntity(&CompA{}, &CompB{}, &CompC{}, &CompD{}, &CompE{}, &CompF{}, &CompG{})
		compMapper.Remove(e)

		e = mapper.NewEntity(&CompA{}, &CompB{}, &CompC{}, &CompD{}, &CompE{}, &CompF{}, &CompG{})
		posMapper.Add(e, &Position{})
	}

	// normal filter
	filter := NewFilter7[CompA, CompB, CompC, CompD, CompE, CompF, CompG](&w)
	query := filter.Query()

	cnt := 0
	for query.Next() {
		_ = query.Entity()
		_, _, _, _, _, _, _ = query.Get()
		cnt++
	}
	assert.Equal(t, cnt, 2*n)

	// filter without
	filter = NewFilter7[CompA, CompB, CompC, CompD, CompE, CompF, CompG](&w).Without(C[Position]())
	query = filter.Query()

	cnt = 0
	for query.Next() {
		_ = query.Entity()
		_, _, _, _, _, _, _ = query.Get()
		cnt++
	}
	assert.Equal(t, cnt, n)

	// filter exclusive
	filter = NewFilter7[CompA, CompB, CompC, CompD, CompE, CompF, CompG](&w).Exclusive()
	query = filter.Query()

	cnt = 0
	for query.Next() {
		_ = query.Entity()
		_, _, _, _, _, _, _ = query.Get()
		cnt++
	}
	assert.Equal(t, cnt, n)
}

func TestQuery7Empty(t *testing.T) {
	w := NewWorld(4)

	posMap := NewMap[Position](&w)

	for range 10 {
		e1 := w.NewEntity()
		posMap.Add(e1, &Position{})
	}

	filter := NewFilter7[CompA, CompB, CompC, CompD, CompE, CompF, CompG](&w)
	query := filter.Query()

	assert.Panics(t, func() { query.Get() })
	assert.Panics(t, func() { query.Entity() })

	cnt := 0
	for query.Next() {
		cnt++
	}
	assert.Equal(t, 0, cnt)

	assert.Panics(t, func() { query.Get() })
	assert.Panics(t, func() { query.Entity() })
	assert.Panics(t, func() { query.Next() })
}

func TestQuery7Relations(t *testing.T) {

}
func TestQuery8(t *testing.T) {
	n := 10
	w := NewWorld(4)

	mapper := NewMap8[CompA, CompB, CompC, CompD, CompE, CompF, CompG, CompH](&w)
	compMapper := NewMap[CompA](&w)
	posMapper := NewMap[Position](&w)

	for range n {
		_ = mapper.NewEntity(&CompA{}, &CompB{}, &CompC{}, &CompD{}, &CompE{}, &CompF{}, &CompG{}, &CompH{})

		e := mapper.NewEntity(&CompA{}, &CompB{}, &CompC{}, &CompD{}, &CompE{}, &CompF{}, &CompG{}, &CompH{})
		compMapper.Remove(e)

		e = mapper.NewEntity(&CompA{}, &CompB{}, &CompC{}, &CompD{}, &CompE{}, &CompF{}, &CompG{}, &CompH{})
		posMapper.Add(e, &Position{})
	}

	// normal filter
	filter := NewFilter8[CompA, CompB, CompC, CompD, CompE, CompF, CompG, CompH](&w)
	query := filter.Query()

	cnt := 0
	for query.Next() {
		_ = query.Entity()
		_, _, _, _, _, _, _, _ = query.Get()
		cnt++
	}
	assert.Equal(t, cnt, 2*n)

	// filter without
	filter = NewFilter8[CompA, CompB, CompC, CompD, CompE, CompF, CompG, CompH](&w).Without(C[Position]())
	query = filter.Query()

	cnt = 0
	for query.Next() {
		_ = query.Entity()
		_, _, _, _, _, _, _, _ = query.Get()
		cnt++
	}
	assert.Equal(t, cnt, n)

	// filter exclusive
	filter = NewFilter8[CompA, CompB, CompC, CompD, CompE, CompF, CompG, CompH](&w).Exclusive()
	query = filter.Query()

	cnt = 0
	for query.Next() {
		_ = query.Entity()
		_, _, _, _, _, _, _, _ = query.Get()
		cnt++
	}
	assert.Equal(t, cnt, n)
}

func TestQuery8Empty(t *testing.T) {
	w := NewWorld(4)

	posMap := NewMap[Position](&w)

	for range 10 {
		e1 := w.NewEntity()
		posMap.Add(e1, &Position{})
	}

	filter := NewFilter8[CompA, CompB, CompC, CompD, CompE, CompF, CompG, CompH](&w)
	query := filter.Query()

	assert.Panics(t, func() { query.Get() })
	assert.Panics(t, func() { query.Entity() })

	cnt := 0
	for query.Next() {
		cnt++
	}
	assert.Equal(t, 0, cnt)

	assert.Panics(t, func() { query.Get() })
	assert.Panics(t, func() { query.Entity() })
	assert.Panics(t, func() { query.Next() })
}

func TestQuery8Relations(t *testing.T) {

}
